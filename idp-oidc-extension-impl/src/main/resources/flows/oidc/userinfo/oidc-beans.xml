<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:c="http://www.springframework.org/schema/c" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"
	default-init-method="initialize" default-destroy-method="destroy">


	<!-- The profile and logging id used as arguments are for development phase 
		only -->
	<bean id="InitializeProfileRequestContext"
		class="net.shibboleth.idp.profile.impl.InitializeProfileRequestContext"
		scope="prototype" p:profileId="http://csc.fi/ns/profiles/oidc/userinfo"
		p:loggingId="%{idp.service.logging.saml2sso:SSO}" />

	<bean id="DecodeMessage" class="org.opensaml.profile.action.impl.DecodeMessage"
		scope="prototype">
		<constructor-arg>
			<bean
				class="org.geant.idpextension.oidc.decoding.impl.OIDCUserInfoRequestDecoder"
				scope="prototype" p:httpServletRequest-ref="shibboleth.HttpServletRequest" />
		</constructor-arg>
	</bean>

	<bean id="InitializeOutboundMessageContext"
		class="org.geant.idpextension.oidc.profile.impl.InitializeOutboundUserInfoResponseMessageContext"
		scope="prototype" />

	<bean id="ValidateAccessToken"
		class="org.geant.idpextension.oidc.profile.impl.ValidateAccessToken"
		scope="prototype" c:sealer-ref="accessTokenSealer"
		p:revocationCache-ref="shibboleth.RevocationCache" />

	<bean id="accessTokenSealer" lazy-init="true"
		class="net.shibboleth.utilities.java.support.security.DataSealer"
		p:keyStrategy-ref="shibboleth.DataSealerKeyStrategy" p:encoder-ref="atBase64Codec"
		p:decoder-ref="atBase64Codec" />

	<bean id="atBase64Codec" class="org.apache.commons.codec.binary.Base64"
		c:lineLength="0" c:lineSeparator="#{new byte[] {10} }" c:urlSafe="true" />

	<bean id="OIDCMetadataLookup"
		class="net.shibboleth.idp.profile.impl.WebFlowMessageHandlerAdaptor"
		scope="prototype" c:executionDirection="INBOUND">
		<constructor-arg name="messageHandler">
			<bean
				class="org.geant.idpextension.oidc.profile.impl.OIDCMetadataLookupHandler"
				scope="prototype">
				<property name="clientInformationResolver">
					<ref bean="shibboleth.ClientInformationResolver" />
				</property>
				<property name="clientIDLookupStrategy">
					<ref bean="shibboleth.UserInfoRequestClientIDLookupStrategy" />
				</property>
			</bean>
		</constructor-arg>
	</bean>

	<bean id="shibboleth.UserInfoRequestClientIDLookupStrategy"
		class="org.geant.idpextension.oidc.profile.context.navigate.UserInfoRequestClientIDLookupFunction"
		scope="prototype" />

	<bean id="InitializeRelyingPartyContext"
		class="org.geant.idpextension.oidc.profile.impl.InitializeRelyingPartyContext"
		scope="prototype" p:clientIDLookupStrategy-ref="shibboleth.UserInfoRequestClientIDLookupStrategy" />

	<bean id="SelectRelyingPartyConfiguration"
		class="net.shibboleth.idp.profile.impl.SelectRelyingPartyConfiguration"
		scope="prototype" p:relyingPartyConfigurationResolver-ref="shibboleth.RelyingPartyConfigurationResolver" />

	<bean id="SelectProfileConfiguration"
		class="net.shibboleth.idp.profile.impl.SelectProfileConfiguration"
		scope="prototype" />

	<bean id="ValidateScope" class="org.geant.idpextension.oidc.profile.impl.ValidateScope"
		scope="prototype" p:scopeLookupStrategy-ref="shibboleth.TokenRequestScopeLookupStrategy" />

	<bean id="shibboleth.TokenRequestScopeLookupStrategy"
		class="org.geant.idpextension.oidc.profile.context.navigate.TokenRequestScopeLookupFunction"
		scope="prototype" />

	<bean id="SetRequestedClaimsToResponseContext"
		class="org.geant.idpextension.oidc.profile.impl.SetRequestedClaimsToResponseContext"
		scope="prototype" p:requestedClaimsLookupStrategy-ref="shibboleth.TokenRequestRequestedClaimsLookupFunction" />

	<bean id="shibboleth.TokenRequestRequestedClaimsLookupFunction"
		class="org.geant.idpextension.oidc.profile.context.navigate.TokenRequestRequestedClaimsLookupFunction"
		scope="prototype" />

	<bean id="InitializeSubjectContext"
		class="org.geant.idpextension.oidc.profile.impl.InitializeSubjectContext"
		scope="prototype" />

	<bean id="ResolveAttributes" class="net.shibboleth.idp.profile.impl.ResolveAttributes"
		scope="prototype" c:resolverService-ref="shibboleth.AttributeResolverService"
		p:maskFailures="%{idp.service.attribute.resolver.maskFailures:true}" />

	<bean id="FilterAttributes" class="net.shibboleth.idp.profile.impl.FilterAttributes"
		scope="prototype" c:filterService-ref="shibboleth.AttributeFilterService"
		p:maskFailures="%{idp.service.attribute.filter.maskFailures:true}" />

	<bean id="SetNameIDToResponseContext"
		class="org.geant.idpextension.oidc.profile.impl.SetNameIDToResponseContext"
		scope="prototype">
		<property name="subjectTypeLookupStrategy">
			<bean
				class="org.geant.idpextension.oidc.profile.logic.DefaultSubjectTypeStrategy" />
		</property>
		<property name="nameIDGenerator">
			<bean class="net.shibboleth.idp.saml.nameid.impl.ProxySAML2NameIDGenerator"
				c:service-ref="shibboleth.oidc.NameIdentifierGenerationService" />
		</property>
	</bean>

	<bean id="AddUserInfoShell"
		class="org.geant.idpextension.oidc.profile.impl.AddUserInfoShell"
		scope="prototype" p:issuerLookupStrategy-ref="shibboleth.ResponderIdLookup.Simple"></bean>

	<bean id="AddAttributeClaimsToUserInfo"
		class="org.geant.idpextension.oidc.profile.impl.AddAttributesToClaimsSet"
		scope="prototype" p:responseClaimsSetLookupStrategy-ref="shibboleth.UserInfoResponseClaimsSetLookupStrategy" />

	<bean id="shibboleth.UserInfoResponseClaimsSetLookupStrategy"
		class="org.geant.idpextension.oidc.profile.context.navigate.UserInfoResponseClaimsSetLookupFunction"
		scope="prototype" />

	<bean id="FormOutboundMessage"
		class="org.geant.idpextension.oidc.profile.impl.FormOutboundUserInfoResponseMessage"
		scope="prototype" />

	<bean id="EncodeMessage"
		class="org.geant.idpextension.oidc.profile.action.impl.EncodeMessage"
		scope="prototype" p:messageEncoder-ref="shibboleth.Encoders.OIDCUserInfoResponseEncoder" />

	<bean id="shibboleth.Encoders.OIDCUserInfoResponseEncoder"
		class="org.geant.idpextension.oidc.encoding.impl.NimbusResponseEncoder"
		scope="prototype" init-method="" p:httpServletResponse-ref="shibboleth.HttpServletResponse" />

	<bean id="BuildErrorResponseFromEvent"
		class="org.geant.idpextension.oidc.profile.impl.BuildUserInfoErrorResponseFromEvent"
		scope="prototype" p:httpServletResponse-ref="shibboleth.HttpServletResponse">
		<property name="eventContextLookupStrategy">
			<bean
				class="net.shibboleth.idp.profile.context.navigate.WebFlowCurrentEventLookupFunction" />
		</property>
		<property name="mappedErrors">
			<map value-type="com.nimbusds.oauth2.sdk.ErrorObject">
				<entry
					key="#{T(org.geant.idpextension.oidc.profile.OidcEventIds).INVALID_GRANT}"
					value="#{T(com.nimbusds.oauth2.sdk.OAuth2Error).INVALID_GRANT}" />
			</map>
		</property>
	</bean>

	<bean id="LogEvent" class="org.opensaml.profile.action.impl.LogEvent"
		scope="prototype"
		p:suppressedEvents="#{getObject('shibboleth.SuppressedEvents') ?: getObject('shibboleth.DefaultSuppressedEvents')}">
		<property name="eventContextLookupStrategy">
			<bean
				class="net.shibboleth.idp.profile.context.navigate.WebFlowCurrentEventLookupFunction" />
		</property>
	</bean>

	<bean id="RecordResponseComplete" class="net.shibboleth.idp.profile.impl.RecordResponseComplete"
		scope="prototype" />

	<bean id="shibboleth.RevocationCache" class="org.geant.idpextension.oidc.storage.RevocationCache"
		depends-on="shibboleth.LoggingService"
		p:entryExpiration="#{'%{idp.oidc.revocationCache.authorizeCode.lifetime:PT6H}'}"
		p:storage-ref="#{'%{idp.oidc.revocationCache.StorageService:shibboleth.StorageService}'.trim()}"
		p:strict="true" />

</beans>
