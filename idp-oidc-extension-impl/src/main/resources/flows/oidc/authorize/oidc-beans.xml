<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:c="http://www.springframework.org/schema/c"
    xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
    xmlns:util="http://www.springframework.org/schema/util" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"
    default-init-method="initialize" default-destroy-method="destroy">

    <!-- Declares audit field extractor functions injected into beans that populate the audit context. -->
    <import resource="../../../system/conf/audit-system.xml" />
    
    <!--  Import core common beans. -->
    <import resource="oidc-core-common-beans.xml" />

    <bean id="InitializeProfileRequestContext"
        class="net.shibboleth.idp.profile.impl.InitializeProfileRequestContext" scope="prototype"
        p:profileId="http://csc.fi/ns/profiles/oidc/sso/browser" p:loggingId="%{idp.service.logging.saml2sso:SSO}"
        p:browserProfile="true" />

    <bean id="DecodeMessage" class="org.opensaml.profile.action.impl.DecodeMessage" scope="prototype">
        <constructor-arg>
            <bean class="org.geant.idpextension.oidc.decoding.impl.OIDCAuthenticationRequestDecoder"
                scope="prototype" p:httpServletRequest-ref="shibboleth.HttpServletRequest" />
        </constructor-arg>
    </bean>

    <bean id="InitializeAuthenticationContext"
        class="org.geant.idpextension.oidc.profile.impl.InitializeAuthenticationContext" scope="prototype" />

    <bean id="ProcessRequestedAuthnContext"
        class="org.geant.idpextension.oidc.profile.impl.ProcessRequestedAuthnContext" scope="prototype" />

    <bean id="InitializeRelyingPartyContext"
        class="org.geant.idpextension.oidc.profile.impl.InitializeRelyingPartyContext" scope="prototype" />

    <bean id="PopulateUserAgentContext" class="net.shibboleth.idp.profile.impl.PopulateUserAgentContext"
        scope="prototype" p:httpServletRequest-ref="shibboleth.HttpServletRequest" />

    <bean id="OIDCMetadataLookup" class="net.shibboleth.idp.profile.impl.WebFlowMessageHandlerAdaptor"
        scope="prototype" c:executionDirection="INBOUND">
        <constructor-arg name="messageHandler">
            <bean class="org.geant.idpextension.oidc.profile.impl.OIDCMetadataLookupHandler" scope="prototype">
                <property name="clientInformationResolver">
                    <ref bean="shibboleth.ClientInformationResolver" />
                </property>
            </bean>
        </constructor-arg>
    </bean>

    <bean id="SetRequestedSubjectToResponseContext"
        class="org.geant.idpextension.oidc.profile.impl.SetRequestedSubjectToResponseContext" scope="prototype" />

    <bean id="SetRequestedClaimsToResponseContext"
        class="org.geant.idpextension.oidc.profile.impl.SetRequestedClaimsToResponseContext" scope="prototype" />

    <bean id="VerifyRequestedSubjectIdentifier"
        class="org.geant.idpextension.oidc.profile.impl.VerifyRequestedSubjectIdentifier" scope="prototype" />

    <bean id="PopulatePostAuthnInterceptContext"
        class="net.shibboleth.idp.profile.interceptor.impl.PopulateProfileInterceptorContext" scope="prototype"
        p:availableFlows-ref="shibboleth.AvailableInterceptFlows">
        <property name="activeFlowsLookupStrategy">
            <bean class="net.shibboleth.idp.authn.config.navigate.PostAuthenticationFlowsLookupFunction" />
        </property>
    </bean>

    <bean id="InitializeOutboundMessageContext"
        class="org.geant.idpextension.oidc.profile.impl.InitializeOutboundAuthenticationResponseMessageContext"
        scope="prototype" />

    <bean id="ValidateRequestObject" class="org.geant.idpextension.oidc.profile.impl.ValidateRequestObject"
        scope="prototype" />

    <bean id="ValidateRedirectURI" class="org.geant.idpextension.oidc.profile.impl.ValidateRedirectURI"
        scope="prototype" />

    <bean id="ValidateResponseType" class="org.geant.idpextension.oidc.profile.impl.ValidateResponseType"
        scope="prototype" />

    <bean id="ValidateScope" class="org.geant.idpextension.oidc.profile.impl.ValidateScope" scope="prototype" />

    <bean id="PopulateIDTokenSignatureSigningParameters"
        class="org.geant.idpextension.oidc.profile.impl.PopulateOIDCSignatureSigningParameters " scope="prototype"
        p:configurationLookupStrategy-ref="shibboleth.SignatureSigningConfigurationLookup"
        p:signatureSigningParametersResolver-ref="shibboleth.oidc.SignatureSigningParametersResolver">
        <property name="activationCondition">
            <ref bean="IDTokenRequested" />
        </property>
        <property name="securityParametersContextLookupStrategy">
            <bean class="com.google.common.base.Functions" factory-method="compose"
                c:g-ref="shibboleth.ChildLookupOrCreate.SecurityParameters"
                c:f-ref="shibboleth.ChildLookup.RelyingParty" />
        </property>
        <property name="existingParametersContextLookupStrategy">
            <bean class="com.google.common.base.Functions" factory-method="compose"
                c:g-ref="shibboleth.ChildLookup.SecurityParameters" c:f-ref="shibboleth.MessageContextLookup.Outbound" />
        </property>
    </bean>

    <bean id="PopulateIDTokenEncryptionParameters"
        class="org.geant.idpextension.oidc.profile.impl.PopulateOIDCEncryptionParameters" scope="prototype"
        p:configurationLookupStrategy-ref="shibboleth.EncryptionConfigurationLookup"
        p:encryptionParametersResolver-ref="shibboleth.oidc.EncryptionParametersResolver">
        <property name="activationCondition">
            <ref bean="IDTokenRequested" />
        </property>
    </bean>

    <bean id="shibboleth.oidc.EncryptionParametersResolver"
        class="org.geant.idpextension.oidc.security.impl.OIDCClientInformationEncryptionParametersResolver" />

    <bean id="SetTokenDeliveryAttributesToResponseContext"
        class="org.geant.idpextension.oidc.profile.impl.SetTokenDeliveryAttributesToResponseContext" scope="prototype">
        <property name="activationCondition">
            <bean parent="shibboleth.Conditions.OR">
                <constructor-arg>
                    <ref bean="AuthorizeCodeRequested" />
                </constructor-arg>
                <constructor-arg>
                    <ref bean="AccessTokenRequested" />
                </constructor-arg>
            </bean>
        </property>
    </bean>

    <bean id="SetConsentToResponseContext"
        class="org.geant.idpextension.oidc.profile.impl.SetConsentToResponseContext" scope="prototype" />

    <bean id="RevokeConsent"
        class="org.geant.idpextension.oidc.profile.impl.RevokeConsent" scope="prototype" />

    <bean id="SetAuthorizationCodeToResponseContext"
        class="org.geant.idpextension.oidc.profile.impl.SetAuthorizationCodeToResponseContext" scope="prototype"
        c:sealer-ref="tokenSealer">
        <property name="identifierGeneratorLookupStrategy">
            <bean class="net.shibboleth.idp.profile.config.navigate.IdentifierGenerationStrategyLookupFunction"
                p:defaultIdentifierGenerationStrategy-ref="shibboleth.DefaultIdentifierGenerationStrategy" />
        </property>
        <property name="activationCondition">
            <ref bean="AuthorizeCodeRequested" />
        </property>
    </bean>

    <bean id="SetAccessTokenToResponseContext"
        class="org.geant.idpextension.oidc.profile.impl.SetAccessTokenToResponseContext" scope="prototype"
        c:sealer-ref="tokenSealer">
        <property name="activationCondition">
            <ref bean="AccessTokenRequested" />
        </property>
    </bean>

    <bean id="SetSubjectToResponseContext"
        class="org.geant.idpextension.oidc.profile.impl.SetSubjectToResponseContext" scope="prototype" >
        <property name="subjectLookupStrategy">
            <bean class="org.geant.idpextension.oidc.profile.logic.AttributeResolutionSubjectLookupFunction" />
        </property>
        <property name="subjectTypeLookupStrategy">
            <bean class="org.geant.idpextension.oidc.profile.logic.DefaultSubjectTypeStrategy" />
        </property>
    </bean> 
   
    <bean id="SetAuthenticationTimeToResponseContext"
        class="org.geant.idpextension.oidc.profile.impl.SetAuthenticationTimeToResponseContext" scope="prototype"></bean>
        
     <bean id="SetSectorIdentifierForAttributeResolution"
        class="org.geant.idpextension.oidc.profile.impl.SetSectorIdentifierForAttributeResolution" scope="prototype"/>

    <bean id="SetAuthenticationContextClassReferenceToResponseContext"
        class="org.geant.idpextension.oidc.profile.impl.SetAuthenticationContextClassReferenceToResponseContext"
        scope="prototype">
        <property name="classRefLookupStrategy">
            <bean class="net.shibboleth.idp.authn.principal.DefaultPrincipalDeterminationStrategy"
                c:type="org.geant.idpextension.oidc.authn.principal.AuthenticationContextClassReferencePrincipal"
                p:weightMap="#{getObject('shibboleth.AuthenticationPrincipalWeightMap')}">
                <constructor-arg name="principal">
                    <bean
                        class="org.geant.idpextension.oidc.authn.principal.AuthenticationContextClassReferencePrincipal"
                        c:classRef="#{T(org.geant.idpextension.oidc.authn.principal.AuthenticationContextClassReferencePrincipal).UNSPECIFIED}" />
                </constructor-arg>
            </bean>
        </property>
    </bean>

    <bean id="AddIDTokenShell" class="org.geant.idpextension.oidc.profile.impl.AddIDTokenShell" scope="prototype"
        p:issuerLookupStrategy-ref="shibboleth.ResponderIdLookup.Simple">
        <property name="activationCondition">
            <ref bean="IDTokenRequested" />
        </property>
        <property name="audienceRestrictionsLookupStrategy">
            <bean class="org.geant.idpextension.oidc.config.navigate.AudienceRestrictionsLookupFunction" />
        </property>
    </bean>

    <bean id="AddAttributeClaimsToIDToken"
        class="org.geant.idpextension.oidc.profile.impl.AddAttributesToClaimsSet" scope="prototype"
        p:targetIDToken="true" p:reservedClaimNames-ref="shibboleth.oidc.IDTokenReservedClaimNames">
        <property name="activationCondition">
            <ref bean="IDTokenRequested" />
        </property>
    </bean>

    <bean id="AddAuthTimeToIDToken" class="org.geant.idpextension.oidc.profile.impl.AddAuthTimeToIDToken"
        scope="prototype">
        <property name="activationCondition">
            <ref bean="IDTokenRequested" />
        </property>
    </bean>

    <bean id="AddAcrToIDToken" class="org.geant.idpextension.oidc.profile.impl.AddAcrToIDToken" scope="prototype">
        <property name="activationCondition">
            <ref bean="IDTokenRequested" />
        </property>
    </bean>

    <bean id="AddNonceToIDToken" class="org.geant.idpextension.oidc.profile.impl.AddNonceToIDToken"
        scope="prototype">
        <property name="activationCondition">
            <ref bean="IDTokenRequested" />
        </property>
    </bean>

    <bean id="AddAccessTokenHashToIDToken"
        class="org.geant.idpextension.oidc.profile.impl.AddAccessTokenHashToIDToken" scope="prototype">
        <property name="securityParametersLookupStrategy">
            <bean class="com.google.common.base.Functions" factory-method="compose"
                c:g-ref="shibboleth.ChildLookup.SecurityParameters" c:f-ref="shibboleth.ChildLookup.RelyingParty" />
        </property>
        <property name="activationCondition">
            <bean parent="shibboleth.Conditions.AND">
                <constructor-arg>
                    <ref bean="AccessTokenRequested" />
                </constructor-arg>
                <constructor-arg>
                    <ref bean="IDTokenRequested" />
                </constructor-arg>
            </bean>
        </property>
    </bean>

    <bean id="AddAuthorizationCodeHashToIDToken"
        class="org.geant.idpextension.oidc.profile.impl.AddAuthorizationCodeHashToIDToken" scope="prototype">
        <property name="securityParametersLookupStrategy">
            <bean class="com.google.common.base.Functions" factory-method="compose"
                c:g-ref="shibboleth.ChildLookup.SecurityParameters" c:f-ref="shibboleth.ChildLookup.RelyingParty" />
        </property>
        <property name="activationCondition">
            <bean parent="shibboleth.Conditions.AND">
                <constructor-arg>
                    <ref bean="AuthorizeCodeRequested" />
                </constructor-arg>
                <constructor-arg>
                    <ref bean="IDTokenRequested" />
                </constructor-arg>
            </bean>
        </property>
    </bean>

    <bean id="SignIDToken" class="org.geant.idpextension.oidc.profile.impl.SignIDToken" scope="prototype">
        <property name="securityParametersLookupStrategy">
            <bean class="com.google.common.base.Functions" factory-method="compose"
                c:g-ref="shibboleth.ChildLookup.SecurityParameters" c:f-ref="shibboleth.ChildLookup.RelyingParty" />
        </property>
        <property name="activationCondition">
            <ref bean="IDTokenRequested" />
        </property>
    </bean>

    <bean id="EncryptIDToken" class="org.geant.idpextension.oidc.profile.impl.EncryptProcessedToken"
        scope="prototype">
        <property name="activationCondition">
            <ref bean="IDTokenRequested" />
        </property>
    </bean>

    <bean id="FormOutboundMessage"
        class="org.geant.idpextension.oidc.profile.impl.FormOutboundAuthenticationResponseMessage" scope="prototype" />

    <bean id="ResolveAttributes" class="net.shibboleth.idp.profile.impl.ResolveAttributes" scope="prototype"
        c:resolverService-ref="shibboleth.AttributeResolverService"
        p:maskFailures="%{idp.service.attribute.resolver.maskFailures:true}" />

    <bean id="FilterAttributes" class="net.shibboleth.idp.profile.impl.FilterAttributes" scope="prototype"
        c:filterService-ref="shibboleth.AttributeFilterService"
        p:maskFailures="%{idp.service.attribute.filter.maskFailures:true}" />

    <bean id="oidc.messageEncoderFactory"
        class="org.geant.idpextension.oidc.encoding.impl.OIDCResponseEncoderFactory"
        p:messageEncoder-ref="oidc.nimbusEncoder" scope="prototype" />

    <bean id="oidc.nimbusEncoder" class="org.geant.idpextension.oidc.encoding.impl.NimbusResponseEncoder"
        scope="prototype" p:httpServletResponse-ref="shibboleth.HttpServletResponse" init-method=""
        p:velocityEngine-ref="shibboleth.VelocityEngine" />

    <bean id="EncodeMessage" class="org.opensaml.profile.action.impl.EncodeMessage" scope="prototype"
        p:messageEncoderFactory-ref="oidc.messageEncoderFactory"
        p:httpServletResponse-ref="shibboleth.HttpServletResponse" />

    <bean id="BuildErrorResponseFromEvent"
        class="org.geant.idpextension.oidc.profile.impl.BuildAuthenticationErrorResponseFromEvent" scope="prototype"
        p:httpServletResponse-ref="shibboleth.HttpServletResponse">
        <property name="eventContextLookupStrategy">
            <bean class="net.shibboleth.idp.profile.context.navigate.WebFlowCurrentEventLookupFunction" />
        </property>
        <property name="mappedErrors">
            <map value-type="com.nimbusds.oauth2.sdk.ErrorObject">
                <entry key="#{T(org.geant.idpextension.oidc.profile.OidcEventIds).INVALID_RESPONSE_TYPE}"
                    value="#{T(com.nimbusds.oauth2.sdk.OAuth2Error).UNSUPPORTED_RESPONSE_TYPE}" />
                 <entry key="#{T(net.shibboleth.idp.authn. AuthnEventIds).NO_PASSIVE}"
                    value="#{T(com.nimbusds.openid.connect.sdk.OIDCError).LOGIN_REQUIRED}" />
            </map>
        </property>
    </bean>

    <bean id="RecordResponseComplete" class="net.shibboleth.idp.profile.impl.RecordResponseComplete"
        scope="prototype" />

    <bean id="LogEvent" class="org.opensaml.profile.action.impl.LogEvent" scope="prototype"
        p:suppressedEvents="#{getObject('shibboleth.SuppressedEvents') ?: getObject('shibboleth.DefaultSuppressedEvents')}">
        <property name="eventContextLookupStrategy">
            <bean class="net.shibboleth.idp.profile.context.navigate.WebFlowCurrentEventLookupFunction" />
        </property>
    </bean>

    <bean id="ErrorViewPopulateAuditContext" parent="shibboleth.AbstractPopulateAuditContext"
        p:fieldExtractors="#{getObject('shibboleth.ErrorViewAuditExtractors') ?: getObject('shibboleth.DefaultErrorViewAuditExtractors')}" />

    <bean id="MapEventToView" class="net.shibboleth.idp.profile.context.navigate.SpringEventToViewLookupFunction"
        p:defaultView-ref="shibboleth.DefaultErrorView" p:eventMap="#{getObject('shibboleth.EventViewMap')}" />

    <bean id="IDTokenRequested" parent="shibboleth.Conditions.Expression">
        <constructor-arg>
            <value>
                #profileContext.getInboundMessageContext().getMessage().getResponseType().contains(T(com.nimbusds.openid.connect.sdk.OIDCResponseTypeValue).ID_TOKEN)
            </value>
        </constructor-arg>
    </bean>

    <bean id="AccessTokenRequested" parent="shibboleth.Conditions.Expression">
        <constructor-arg>
            <value>
                #profileContext.getInboundMessageContext().getMessage().getResponseType().contains(T(com.nimbusds.oauth2.sdk.ResponseType.Value).TOKEN)
            </value>
        </constructor-arg>
    </bean>

    <bean id="AuthorizeCodeRequested" parent="shibboleth.Conditions.Expression">
        <constructor-arg>
            <value>
                #profileContext.getInboundMessageContext().getMessage().getResponseType().contains(T(com.nimbusds.oauth2.sdk.ResponseType.Value).CODE)
            </value>
        </constructor-arg>
    </bean>

    <bean id="PostDecodePopulateAuditContext" parent="shibboleth.AbstractPopulateAuditContext"
        p:fieldExtractors="#{getObject('shibboleth.oidc.PostDecodeAuditExtractors') ?: getObject('shibboleth.oidc.DefaultPostDecodeAuditExtractors')}" />

    <bean id="PostLookupPopulateAuditContext" parent="shibboleth.AbstractPopulateAuditContext"
        p:fieldExtractors="#{getObject('shibboleth.oidc.PostLookupAuditExtractors') ?: getObject('shibboleth.DefaultPostLookupAuditExtractors')}" />
        
    <bean id="PostResponsePopulateAuditContext" parent="shibboleth.AbstractPopulateAuditContext"
        p:fieldExtractors="#{getObject('shibboleth.oidc.PostResponseAuditExtractors') ?: getObject('shibboleth.DefaultPostResponseAuditExtractors')}" />

    <bean id="WriteAuditLog" class="net.shibboleth.idp.profile.audit.impl.WriteAuditLog" scope="prototype"
        p:formattingMap-ref="shibboleth.AuditFormattingMap"
        p:dateTimeFormat="#{getObject('shibboleth.AuditDateTimeFormat')}"
        p:useDefaultTimeZone="#{getObject('shibboleth.AuditDefaultTimeZone') ?: false}"
        p:httpServletRequest-ref="shibboleth.HttpServletRequest" />
        
    <bean id="shibboleth.oidc.DefaultPostDecodeAuditExtractors"
            class="org.springframework.beans.factory.config.MapFactoryBean">
        <property name="sourceMap">
            <map>
                <entry>
                    <key>
                        <util:constant static-field="org.geant.idpextension.oidc.audit.AuditFields.INBOUND_MESSAGE_CLASS"/>
                    </key>
                    <bean class="org.geant.idpextension.oidc.audit.impl.InboundMessageClassLookupFunction" />
                </entry>
            </map>
        </property>
    </bean>

</beans>
