<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:c="http://www.springframework.org/schema/c"
    xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
    xmlns:util="http://www.springframework.org/schema/util" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"
    default-init-method="initialize" default-destroy-method="destroy">

    <!-- Sealer used to protect confidentiality and integrity of authorize code, access token and refresh token. -->
    <bean id="tokenSealer" lazy-init="true" class="net.shibboleth.utilities.java.support.security.DataSealer"
        p:keyStrategy-ref="shibboleth.DataSealerKeyStrategy" p:encoder-ref="base64Codec" p:decoder-ref="base64Codec" />

    <bean id="base64Codec" class="org.apache.commons.codec.binary.Base64" c:lineLength="0"
        c:lineSeparator="#{new byte[] {10} }" c:urlSafe="true" />

    <bean id="shibboleth.oidc.SignatureSigningParametersResolver"
        class="org.geant.idpextension.oidc.security.impl.OIDCClientInformationSignatureSigningParametersResolver" />

    <bean id="shibboleth.RevocationCache" class="org.geant.idpextension.oidc.storage.RevocationCache"
        depends-on="shibboleth.LoggingService"
        p:entryExpiration="#{'%{idp.oidc.revocationCache.authorizeCode.lifetime:PT6H}'}"
        p:storage-ref="#{'%{idp.oidc.revocationCache.StorageService:shibboleth.StorageService}'.trim()}" p:strict="true" />

    <bean id="SelectRelyingPartyConfiguration"
        class="net.shibboleth.idp.profile.impl.SelectRelyingPartyConfiguration" scope="prototype"
        p:relyingPartyConfigurationResolver-ref="shibboleth.RelyingPartyConfigurationResolver" />

    <bean id="SelectProfileConfiguration" class="net.shibboleth.idp.profile.impl.SelectProfileConfiguration"
        scope="prototype" />

    <bean id="ResolveAttributes" class="net.shibboleth.idp.profile.impl.ResolveAttributes" scope="prototype"
        c:resolverService-ref="shibboleth.AttributeResolverService"
        p:maskFailures="%{idp.service.attribute.resolver.maskFailures:true}" />

    <bean id="FilterAttributes" class="net.shibboleth.idp.profile.impl.FilterAttributes" scope="prototype"
        c:filterService-ref="shibboleth.AttributeFilterService"
        p:maskFailures="%{idp.service.attribute.filter.maskFailures:true}" />

    <bean id="oidc.messageEncoderFactory"
        class="org.geant.idpextension.oidc.encoding.impl.OIDCResponseEncoderFactory"
        p:messageEncoder-ref="oidc.nimbusEncoder" scope="prototype" />

    <bean id="oidc.nimbusEncoder" class="org.geant.idpextension.oidc.encoding.impl.NimbusResponseEncoder"
        scope="prototype" p:httpServletResponse-ref="shibboleth.HttpServletResponse" init-method=""
        p:velocityEngine-ref="shibboleth.VelocityEngine" />

    <bean id="EncodeMessage" class="org.opensaml.profile.action.impl.EncodeMessage" scope="prototype"
        p:messageEncoderFactory-ref="oidc.messageEncoderFactory"
        p:httpServletResponse-ref="shibboleth.HttpServletResponse" />

    <bean id="BuildErrorResponseFromEvent"
        class="org.geant.idpextension.oidc.profile.impl.BuildTokenErrorResponseFromEvent" scope="prototype"
        p:httpServletResponse-ref="shibboleth.HttpServletResponse">
        <property name="eventContextLookupStrategy">
            <bean class="net.shibboleth.idp.profile.context.navigate.WebFlowCurrentEventLookupFunction" />
        </property>
        <property name="mappedErrors">
            <map value-type="com.nimbusds.oauth2.sdk.ErrorObject">
                <entry key="#{T(org.geant.idpextension.oidc.profile.OidcEventIds).INVALID_GRANT}"
                    value="#{T(com.nimbusds.oauth2.sdk.OAuth2Error).INVALID_GRANT}" />
                <entry key="#{T(org.geant.idpextension.oidc.profile.OidcEventIds).INVALID_REDIRECT_URI}"
                    value="#{T(com.nimbusds.oauth2.sdk.OAuth2Error).INVALID_REQUEST}" />
                <entry key="#{T(org.geant.idpextension.oidc.profile.OidcEventIds).INVALID_RESPONSE_TYPE}"
                    value="#{T(com.nimbusds.oauth2.sdk.OAuth2Error).UNSUPPORTED_RESPONSE_TYPE}" />
                <entry key="#{T(net.shibboleth.idp.authn. AuthnEventIds).NO_PASSIVE}"
                    value="#{T(com.nimbusds.openid.connect.sdk.OIDCError).LOGIN_REQUIRED}" />
                <entry key="#{T(org.geant.idpextension.oidc.profile.OidcEventIds).INVALID_GRANT}"
                    value="#{T(com.nimbusds.oauth2.sdk.OAuth2Error).INVALID_GRANT}" />
            </map>
        </property>
    </bean>

    <bean id="RecordResponseComplete" class="net.shibboleth.idp.profile.impl.RecordResponseComplete"
        scope="prototype" />

    <bean id="LogEvent" class="org.opensaml.profile.action.impl.LogEvent" scope="prototype"
        p:suppressedEvents="#{getObject('shibboleth.SuppressedEvents') ?: getObject('shibboleth.DefaultSuppressedEvents')}">
        <property name="eventContextLookupStrategy">
            <bean class="net.shibboleth.idp.profile.context.navigate.WebFlowCurrentEventLookupFunction" />
        </property>
    </bean>
    
    <bean id="PostDecodePopulateAuditContext" parent="shibboleth.AbstractPopulateAuditContext"
    p:fieldExtractors="#{getObject('shibboleth.oidc.PostDecodeAuditExtractors') ?: getObject('shibboleth.oidc.DefaultPostDecodeAuditExtractors')}" />

    <bean id="PostLookupPopulateAuditContext" parent="shibboleth.AbstractPopulateAuditContext"
        p:fieldExtractors="#{getObject('shibboleth.oidc.PostLookupAuditExtractors') ?: getObject('shibboleth.DefaultPostLookupAuditExtractors')}" />

    <bean id="PostResponsePopulateAuditContext" parent="shibboleth.AbstractPopulateAuditContext"
        p:fieldExtractors="#{getObject('shibboleth.oidc.PostResponseAuditExtractors') ?: getObject('shibboleth.DefaultPostResponseAuditExtractors')}" />

    <bean id="WriteAuditLog" class="net.shibboleth.idp.profile.audit.impl.WriteAuditLog" scope="prototype"
        p:formattingMap-ref="shibboleth.AuditFormattingMap"
        p:dateTimeFormat="#{getObject('shibboleth.AuditDateTimeFormat')}"
        p:useDefaultTimeZone="#{getObject('shibboleth.AuditDefaultTimeZone') ?: false}"
        p:httpServletRequest-ref="shibboleth.HttpServletRequest" />

    <bean id="shibboleth.oidc.DefaultPostDecodeAuditExtractors"
        class="org.springframework.beans.factory.config.MapFactoryBean">
        <property name="sourceMap">
            <map>
                <entry>
                    <key>
                        <util:constant
                            static-field="org.geant.idpextension.oidc.audit.AuditFields.INBOUND_MESSAGE_CLASS" />
                    </key>
                    <bean class="org.geant.idpextension.oidc.audit.impl.InboundMessageClassLookupFunction" />
                </entry>
            </map>
        </property>
    </bean>
    

</beans>
