<flow xmlns="http://www.springframework.org/schema/webflow" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/webflow http://www.springframework.org/schema/webflow/spring-webflow.xsd">


    <action-state id="InitializeProfileRequestContext">
        <evaluate expression="InitializeProfileRequestContext" />
        <evaluate expression="'proceed'" />
        <transition on="proceed" to="DecodeMessage" />
    </action-state>

    <action-state id="DecodeMessage">
        <evaluate expression="DecodeMessage" />
        <evaluate expression="OIDCMetadataLookup" />
        <evaluate expression="InitializeRelyingPartyContext" />
        <evaluate expression="SelectRelyingPartyConfiguration" />
        <evaluate expression="SelectProfileConfiguration" />
        <evaluate expression="PopulateUserAgentContext" />
        <evaluate expression="'proceed'" />
        <transition on="proceed" to="OutboundContextsAndSecurityParameters" />
    </action-state>

    <action-state id="OutboundContextsAndSecurityParameters">
        <evaluate expression="InitializeOutboundMessageContext" />
        <evaluate expression="ValidateRequestObject" />
        <evaluate expression="ValidateRedirectURI" />
        <evaluate expression="ValidateResponseType" />
        <evaluate expression="ValidateScope" />
        <evaluate expression="SetRequestedClaimsToResponseContext" />
        <evaluate expression="SetRequestedSubjectToResponseContext" />
        <evaluate expression="PopulateIDTokenSignatureSigningParameters" />
        <evaluate expression="'proceed'" />
        <transition on="proceed" to="PostInitialSetup" />
    </action-state>

    <action-state id="PostInitialSetup">
        <evaluate expression="InitializeAuthenticationContext" />
        <evaluate expression="ProcessRequestedAuthnContext" />
        <evaluate expression="'proceed'" />
        <transition on="proceed" to="DoAuthenticationSubflow" />
    </action-state>

    <subflow-state id="DoAuthenticationSubflow" subflow="authn-oidc">
        <input name="calledAsSubflow" value="true" />
        <transition on="proceed" to="SetAuthenticationInformationToResponseContext" />
        <transition on="RestartAuthentication" to="PostInitialSetup" />
    </subflow-state>

    <action-state id="SetAuthenticationInformationToResponseContext">
        <evaluate expression="SetAuthenticationContextClassReferenceToResponseContext" />
        <evaluate expression="SetAuthenticationTimeToResponseContext" />
        <evaluate expression="'proceed'" />
        <transition on="proceed" to="AttributeResolution" />
    </action-state>

    <action-state id="AttributeResolution">
        <evaluate expression="ResolveAttributes" />
        <evaluate expression="FilterAttributes" />
        <evaluate expression="RevokeConsentForOfflineAccess" />
        <evaluate expression="PopulatePostAuthnInterceptContext" />
        <evaluate expression="'proceed'" />
        <transition on="proceed" to="CheckPostAuthnInterceptContext" />
    </action-state>

    <decision-state id="CheckPostAuthnInterceptContext">
        <if
            test="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.profile.context.ProfileInterceptorContext)).getAvailableFlows().isEmpty()"
            then="SubjectResolution" else="DoPostAuthnInterceptSubflow" />
    </decision-state>

    <subflow-state id="DoPostAuthnInterceptSubflow" subflow="intercept">
        <input name="calledAsSubflow" value="true" />
        <transition on="proceed" to="SubjectResolution" />
        <transition on="RestartAuthentication" to="PostInitialSetup" />
    </subflow-state>

    <action-state id="SubjectResolution">
        <evaluate expression="SetNameIDToResponseContext" />
        <evaluate expression="VerifyRequestedSubjectIdentifier" />
        <evaluate expression="'proceed'" />
        <transition on="proceed" to="BuildTokens" />
    </action-state>

    <action-state id="BuildTokens">
        <evaluate expression="SetTokenDeliveryAttributesToResponseContext" />
        <evaluate expression="SetConsentToResponseContext" />
        <evaluate expression="SetAuthorizationCodeToResponseContext" />
        <evaluate expression="SetAccessTokenToResponseContext" />
        <evaluate expression="'proceed'" />
        <transition on="proceed" to="BuildResponse" />
    </action-state>

    <action-state id="BuildResponse">
        <evaluate expression="AddIDTokenShell" />
        <evaluate expression="AddAttributeClaimsToIDToken" />
        <evaluate expression="AddAuthTimeToIDToken" />
        <evaluate expression="AddAcrToIDToken" />
        <evaluate expression="AddNonceToIDToken" />
        <evaluate expression="AddAccessTokenHashToIDToken" />
        <evaluate expression="AddAuthorizationCodeHashToIDToken" />
        <evaluate expression="SignIDToken" />
        <evaluate expression="FormOutboundMessage" />
        <evaluate expression="'proceed'" />
        <transition on="proceed" to="CommitResponse" />
    </action-state>

    <!-- Error views, handling and end states -->

    <!-- Passthrough state if an exception is thrown. -->
    <action-state id="LogRuntimeException">
        <on-entry>
            <evaluate
                expression="T(org.slf4j.LoggerFactory).getLogger('net.shibboleth.idp.saml.profile').error('Uncaught runtime exception', flowExecutionException.getCause())" />
        </on-entry>
        <evaluate expression="'RuntimeException'" />
        <transition to="DisplayError" />
    </action-state>

    <!-- First we check if error is mapped as local audited error -->
    <decision-state id="HandleError">
        <if
            test="flowRequestContext.getActiveFlow().getApplicationContext().getBean('shibboleth.LocalEventMap').containsKey(currentEvent.id) and flowRequestContext.getActiveFlow().getApplicationContext().getBean('shibboleth.LocalEventMap').get(currentEvent.id)"
            then="AuditedErrorView" else="HandleLocalErrorWithView" />
    </decision-state>

    <!-- Second we check if error is mapped as local non audited error -->
    <decision-state id="HandleLocalErrorWithView">
        <if
            test="flowRequestContext.getActiveFlow().getApplicationContext().getBean('shibboleth.LocalEventMap').containsKey(currentEvent.id)"
            then="ErrorView" else="BuildErrorResponse" />
    </decision-state>

    <!-- Third we see if we are able to form a error response, if that fails we revert to generic error display -->
    <decision-state id="BuildErrorResponse">
        <on-entry>
            <evaluate expression="BuildErrorResponseFromEvent" />
        </on-entry>
        <if
            test="opensamlProfileRequestContext.getOutboundMessageContext() != null &amp;&amp; opensamlProfileRequestContext.getOutboundMessageContext().getMessage() != null"
            then="CommitResponse" else="DisplayError" />
        <exception-handler bean="RethrowingFlowExecutionExceptionHandler" />
    </decision-state>

    <end-state id="AuditedErrorView" view="#{MapEventToView.apply(currentEvent)}">
        <on-entry>
            <evaluate expression="ErrorViewPopulateAuditContext" />
            <evaluate expression="WriteAuditLog" />
            <evaluate expression="environment" result="requestScope.environment" />
            <evaluate expression="opensamlProfileRequestContext" result="requestScope.profileRequestContext" />
            <evaluate expression="T(net.shibboleth.utilities.java.support.codec.HTMLEncoder)"
                result="requestScope.encoder" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeRequest()"
                result="requestScope.request" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeResponse()"
                result="requestScope.response" />
            <evaluate
                expression="flowRequestContext.getActiveFlow().getApplicationContext().containsBean('shibboleth.CustomViewContext') ? flowRequestContext.getActiveFlow().getApplicationContext().getBean('shibboleth.CustomViewContext') : null"
                result="requestScope.custom" />
        </on-entry>
        <exception-handler bean="RethrowingFlowExecutionExceptionHandler" />
    </end-state>

    <end-state id="ErrorView" view="#{MapEventToView.apply(currentEvent)}">
        <on-entry>
            <evaluate expression="environment" result="requestScope.environment" />
            <evaluate expression="opensamlProfileRequestContext" result="requestScope.profileRequestContext" />
            <evaluate expression="T(net.shibboleth.utilities.java.support.codec.HTMLEncoder)"
                result="requestScope.encoder" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeRequest()"
                result="requestScope.request" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeResponse()"
                result="requestScope.response" />
            <evaluate
                expression="flowRequestContext.getActiveFlow().getApplicationContext().containsBean('shibboleth.CustomViewContext') ? flowRequestContext.getActiveFlow().getApplicationContext().getBean('shibboleth.CustomViewContext') : null"
                result="requestScope.custom" />
        </on-entry>
        <exception-handler bean="RethrowingFlowExecutionExceptionHandler" />
    </end-state>

    <view-state id="DisplayError" view="#{flowRequestContext.activeFlow.id}-error">
        <on-render>
            <evaluate expression="environment" result="viewScope.environment" />
            <evaluate expression="opensamlProfileRequestContext" result="viewScope.profileRequestContext" />
            <evaluate expression="T(net.shibboleth.utilities.java.support.codec.HTMLEncoder)"
                result="viewScope.encoder" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeRequest()"
                result="viewScope.request" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeResponse()"
                result="viewScope.response" />
        </on-render>
        <exception-handler bean="RethrowingFlowExecutionExceptionHandler" />
    </view-state>

    <!-- end state -->
    <end-state id="CommitResponse">
        <on-entry>
            <evaluate expression="EncodeMessage" />
            <evaluate expression="RecordResponseComplete" />
        </on-entry>
    </end-state>

    <!-- all unhandled non proceed results are turned into errors -->
    <global-transitions>
        <transition on-exception="java.lang.RuntimeException" to="LogRuntimeException" />
        <transition on="#{!'proceed'.equals(currentEvent.id)}" to="HandleError" />
    </global-transitions>

    <bean-import resource="../../../system/flows/saml/security-beans.xml" />
    <bean-import resource="oidc-beans.xml" />

</flow>

