<flow xmlns="http://www.springframework.org/schema/webflow"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/webflow http://www.springframework.org/schema/webflow/spring-webflow.xsd">


	<action-state id="InitializeProfileRequestContext">
		<evaluate expression="InitializeProfileRequestContext" />
		<evaluate expression="'proceed'" />
		<transition on="proceed" to="DecodeMessage" />
	</action-state>

	<action-state id="DecodeMessage">
		<evaluate expression="DecodeMessage" />
		<evaluate expression="OIDCMetadataLookup" />
		<evaluate expression="InitializeRelyingPartyContext" />
		<evaluate expression="SelectRelyingPartyConfiguration" />
		<evaluate expression="SelectProfileConfiguration" />
		<evaluate expression="PopulateUserAgentContext" />
		<evaluate expression="'proceed'" />
		<transition on="proceed" to="OutboundContextsAndSecurityParameters" />
	</action-state>

	<action-state id="OutboundContextsAndSecurityParameters">
		<evaluate expression="InitializeOutboundMessageContext" />
		<evaluate expression="ValidateRedirectURI" />
		<evaluate expression="ValidateScope" />
		<evaluate expression="SetRequestedSubjectToResponseContext" />
		<evaluate expression="PopulateIDTokenSignatureSigningParameters" />
		<evaluate expression="'proceed'" />
		<transition on="proceed" to="PostInitialSetup" />
	</action-state>

	<action-state id="PostInitialSetup">
		<evaluate expression="InitializeAuthenticationContext" />
		<evaluate expression="ProcessRequestedAuthnContext" />
		<evaluate expression="'proceed'" />
		<transition on="proceed" to="DoAuthenticationSubflow" />
	</action-state>

	<subflow-state id="DoAuthenticationSubflow" subflow="authn-oidc">
		<input name="calledAsSubflow" value="true" />
		<transition on="proceed" to="AttributeResolution" />
		<transition on="RestartAuthentication" to="PostInitialSetup" />
	</subflow-state>

	<action-state id="AttributeResolution">
		<evaluate expression="ResolveAttributes" />
		<evaluate expression="FilterAttributes" />
		<evaluate expression="SetNameIDToResponseContext" />
		<evaluate expression="VerifyRequestedSubjectIdentifier" />
		<evaluate expression="PopulatePostAuthnInterceptContext" />
		<evaluate expression="'proceed'" />
		<transition on="proceed" to="CheckPostAuthnInterceptContext" />
	</action-state>

	<decision-state id="CheckPostAuthnInterceptContext">
		<if
			test="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.profile.context.ProfileInterceptorContext)).getAvailableFlows().isEmpty()"
			then="BuildResponse" else="DoPostAuthnInterceptSubflow" />
	</decision-state>

	<subflow-state id="DoPostAuthnInterceptSubflow" subflow="intercept">
		<input name="calledAsSubflow" value="true" />
		<transition on="proceed" to="BuildResponse" />
		<transition on="RestartAuthentication" to="PostInitialSetup" />
	</subflow-state>

	<action-state id="BuildResponse">
		<evaluate expression="SetAuthenticationTimeToResponseContext" />
		<evaluate expression="SetExpirationTimeToResponseContext" />
		<evaluate expression="SetAuthenticationContextClassReferenceToResponseContext" />
		<evaluate expression="AddIDTokenShell" />
		<evaluate expression="AddAttributeClaimsToIDToken" />
		<evaluate expression="AddAuthTimeToIDToken" />
		<evaluate expression="AddAcrToIDToken" />
		<evaluate expression="AddNonceToIDToken" />
		<evaluate expression="SignIDToken" />
		<evaluate expression="'proceed'" />
		<transition on="proceed" to="HandleOutboundMessage" />
	</action-state>

	<action-state id="HandleOutboundMessage">
	    <evaluate expression="FormOutboundMessage" />
	    <evaluate expression="EncodeMessage" />
	    <evaluate expression="RecordResponseComplete" />
	    <evaluate expression="'proceed'" />
	    <transition on="proceed" to="end" />
	    <transition to="DisplayError" />
	    <exception-handler bean="RethrowingFlowExecutionExceptionHandler" />
    </action-state>


	<!-- Error views, handling and end states -->
	<view-state id="DisplayError" view="#{flowRequestContext.activeFlow.id}-error">
		<on-render>
			<evaluate expression="environment" result="viewScope.environment" />
			<evaluate expression="opensamlProfileRequestContext" result="viewScope.profileRequestContext" />
			<evaluate
				expression="T(net.shibboleth.utilities.java.support.codec.HTMLEncoder)"
				result="viewScope.encoder" />
			<evaluate
				expression="flowRequestContext.getExternalContext().getNativeRequest()"
				result="viewScope.request" />
			<evaluate
				expression="flowRequestContext.getExternalContext().getNativeResponse()"
				result="viewScope.response" />
		</on-render>
		<transition to="HandleErrorLocally" />
		<exception-handler bean="RethrowingFlowExecutionExceptionHandler" />
	</view-state>

	<!-- Passthrough state if an exception is thrown. -->
	<action-state id="LogRuntimeException">
		<on-entry>
			<evaluate
				expression="T(org.slf4j.LoggerFactory).getLogger('net.shibboleth.idp.saml.profile').error('Uncaught runtime exception', flowExecutionException.getCause())" />
		</on-entry>
		<evaluate expression="'RuntimeException'" />
		<transition to="DisplayError" />
	</action-state>
	
	<!-- Select to show local error or oidc error response -->
    <decision-state id="SelectErrorMedia">
	    <if
		    test="opensamlProfileRequestContext.getOutboundMessageContext().getSubcontext(T(org.geant.idpextension.oidc.messaging.context.OIDCAuthenticationResponseContext), false) != null &amp;&amp; opensamlProfileRequestContext.getOutboundMessageContext().getSubcontext(T(org.geant.idpextension.oidc.messaging.context.OIDCAuthenticationResponseContext), false).getRedirectURI() != null &amp;&amp; opensamlProfileRequestContext.getOutboundMessageContext().getSubcontext(T(org.geant.idpextension.oidc.messaging.context.OIDCAuthenticationResponseContext), false).getErrorCode() != null"
		    then="HandleOutboundMessage" else="DisplayError" />
    </decision-state>
	

	<end-state id="end" />

	<!-- end state after error display -->
	<end-state id="HandleErrorLocally">
		<on-entry>
			<evaluate expression="RecordResponseComplete" />
		</on-entry>
	</end-state>

	<!-- all unhandled non proceed results are turned into errors -->
	<global-transitions>
		<transition on-exception="java.lang.RuntimeException" to="LogRuntimeException" />
		<transition on="#{!'proceed'.equals(currentEvent.id)}" to="SelectErrorMedia" />
	</global-transitions>

	<bean-import resource="../../../system/flows/saml/security-beans.xml" />
	<bean-import resource="oidc-beans.xml" />

</flow>

