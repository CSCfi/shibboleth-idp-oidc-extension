<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:c="http://www.springframework.org/schema/c" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"
	default-init-method="initialize" default-destroy-method="destroy">


	<!-- The profile and logging id used as arguments are for development phase 
		only -->
	<bean id="InitializeProfileRequestContext"
		class="net.shibboleth.idp.profile.impl.InitializeProfileRequestContext"
		scope="prototype" p:profileId="http://csc.fi/ns/profiles/oidc/token"
		p:loggingId="%{idp.service.logging.saml2sso:SSO}" />

	<bean id="DecodeMessage" class="org.opensaml.profile.action.impl.DecodeMessage"
		scope="prototype">
		<constructor-arg>
			<bean
				class="org.geant.idpextension.oidc.decoding.impl.OIDCTokenRequestDecoder"
				scope="prototype" p:httpServletRequest-ref="shibboleth.HttpServletRequest" />
		</constructor-arg>
	</bean>

	<bean id="OIDCMetadataLookup"
		class="net.shibboleth.idp.profile.impl.WebFlowMessageHandlerAdaptor"
		scope="prototype" c:executionDirection="INBOUND">
		<constructor-arg name="messageHandler">
			<bean
				class="org.geant.idpextension.oidc.profile.impl.OIDCMetadataLookupHandler"
				scope="prototype">
				<property name="clientInformationResolver">
					<ref bean="shibboleth.ClientInformationResolver" />
				</property>
			</bean>
		</constructor-arg>
	</bean>

	<bean id="InitializeRelyingPartyContext"
		class="org.geant.idpextension.oidc.profile.impl.InitializeRelyingPartyContext"
		scope="prototype" />

	<bean id="SelectRelyingPartyConfiguration"
		class="net.shibboleth.idp.profile.impl.SelectRelyingPartyConfiguration"
		scope="prototype" p:relyingPartyConfigurationResolver-ref="shibboleth.RelyingPartyConfigurationResolver" />

	<bean id="InitializeOutboundMessageContext"
		class="org.geant.idpextension.oidc.profile.impl.InitializeOutboundAuthenticationResponseMessageContext"
		scope="prototype" />

	<bean id="ValidateAuthorizeCode"
		class="org.geant.idpextension.oidc.profile.impl.ValidateAuthorizeCode"
		scope="prototype" c:sealer-ref="authorizeCodeSealer" />

	<bean id="authorizeCodeSealer" lazy-init="true"
		class="net.shibboleth.utilities.java.support.security.DataSealer"
		p:keyStrategy-ref="shibboleth.DataSealerKeyStrategy" p:encoder-ref="acBase64Codec"
		p:decoder-ref="acBase64Codec" />

	<bean id="acBase64Codec" class="org.apache.commons.codec.binary.Base64"
		c:lineLength="0" c:lineSeparator="#{new byte[] {10} }" c:urlSafe="true" />

	<bean id="InitializeSubjectContext"
		class="org.geant.idpextension.oidc.profile.impl.InitializeSubjectContext"
		scope="prototype" />

	<bean id="ResolveAttributes" class="net.shibboleth.idp.profile.impl.ResolveAttributes"
		scope="prototype" c:resolverService-ref="shibboleth.AttributeResolverService"
		p:maskFailures="%{idp.service.attribute.resolver.maskFailures:true}" />

</beans>
