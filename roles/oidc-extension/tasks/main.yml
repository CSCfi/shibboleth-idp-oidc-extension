---

- name: Ensure "{{ idp_home }}/static" dir exists
  file: path="{{ idp_home }}/static/" state=directory

- name: Ensure "{{ idp_home }}/static/oidc/" dir exists
  file: path="{{ idp_home }}/static/oidc/" state=directory

- name: Ensure "{{ idp_home }}/static/.well-known/" dir exists
  file: path="{{ idp_home }}/static/.well-known/" state=directory

- name: Unarchive idp-oidc-extension-distribution-0.8.0-SNAPSHOT-bin.tar.gz
  unarchive:
    src: ../../../idp-oidc-extension-distribution/target/idp-oidc-extension-distribution-0.8.0-SNAPSHOT-bin.tar.gz
    dest: "{{Â idp_home }}"
    owner: root
    group: jetty
    extra_opts: [--strip-components=1]

- name: Build new idp.war
  shell: source {{ environment_file }} && "{{ idp_home }}/bin/build.sh"
  become_user: root

- name: Set issuer id to idp-oidc.properties
  lineinfile: dest={{ idp_home }}/conf/idp-oidc.properties regexp="^#?\s*({{ item.option }}\s*=)" backrefs=yes  line="\\1 {{ item.value }}"
  with_items:
    - { option: 'idp.oidc.issuer', value: 'https://{{ service_name }}'}
    
- name: configure shibboleth-idp ldap.properties
  lineinfile: dest={{ idp_home }}/conf/ldap.properties regexp="^#?\s*({{ item.option }}\s*=)" backrefs=yes  line="\\1 {{ item.value }}"
  with_items:
    - { option: 'idp.authn.LDAP.authenticator', value: 'bindSearchAuthenticator'}
    - { option: 'idp.authn.LDAP.ldapURL', value: 'ldap://{{ hostvars[inventory_hostname].service_name }}:389' }
    - { option: 'idp.authn.LDAP.useStartTLS', value: 'false' }
    - { option: 'idp.authn.LDAP.useSSL', value: 'false' }
    - { option: 'idp.authn.LDAP.baseDN', value: 'ou=People,{{ dirsrv_suffix }}' }
    - { option: 'idp.authn.LDAP.bindDN', value: 'cn=Directory Manager' }
    - { option: 'idp.authn.LDAP.bindDNCredential', value: '{{ dirsrv_password }}' }

- name: configure shibboleth-idp idp.properties
  lineinfile: dest={{ idp_home }}/conf/idp.properties regexp="^#?\s*({{ item.option }}\s*=)" backrefs=yes  line="\\1 {{ item.value }}"
  with_items:
    - { option: 'idp.session.StorageService', value: 'shibboleth.JPAStorageService' }
    - { option: 'idp.entityID', value: 'https://{{ service_name }}' }
         
- name: Add one trusted test SP
  blockinfile:
    dest: "{{ idp_home }}/conf/metadata-providers.xml"
    marker: "<!-- {mark} ANSIBLE MANAGED BLOCK -->"
    insertbefore: "</MetadataProvider>"
    content: |
          <MetadataProvider id="HTTPMetadata"
                            xsi:type="FileBackedHTTPMetadataProvider"
                            backingFile="/tmp/metadatacopy.xml"
                            metadataURL="https://mpass-proxy-test.csc.fi/attributetest/Shibboleth.sso/Metadata"> 
              <MetadataFilter xsi:type="EntityRoleWhiteList">
                  <RetainedRole>md:SPSSODescriptor</RetainedRole>
              </MetadataFilter>
          </MetadataProvider>

- name: Add default oidc credentials to credentials.xml
  blockinfile:
    dest: "{{ idp_home }}/conf/credentials.xml"
    marker: "<!-- {mark} ANSIBLE MANAGED BLOCK -->"
    insertafter: "default signing key"
    content: |
         <bean id="shibboleth.oidc.DefaultRSSigningCredential"
             class="org.geant.idpextension.oidc.profile.spring.factory.BasicJWKCredentialFactoryBean"
             p:jWKResource="%{idp.signing.oidc.rs.key}" />
         <bean id="shibboleth.oidc.DefaultESSigningCredential"
             class="org.geant.idpextension.oidc.profile.spring.factory.BasicJWKCredentialFactoryBean"
             p:jWKResource="%{idp.signing.oidc.es.key}" />

- name: Add OIDC client information resolver service to services.xml
  blockinfile:
    dest: "{{ idp_home }}/conf/services.xml"
    marker: "<!-- {mark} ANSIBLE MANAGED BLOCK -->"
    insertbefore: "<util:list id=\"shibboleth.RelyingPartyResolverResources"
    content: |
        <bean id="shibboleth.ClientInformationResolverService" class="net.shibboleth.ext.spring.service.ReloadableSpringService"
                depends-on="shibboleth.AttributeResolverService"
                p:serviceConfigurations-ref="shibboleth.ClientInformationResolverResources"
                p:failFast="%{idp.service.metadata.failFast:%{idp.service.failFast:false}}"
                p:reloadCheckDelay="%{idp.service.metadata.checkInterval:PT0S}"
                p:beanFactoryPostProcessors-ref="shibboleth.PropertySourcesPlaceholderConfigurer">
            <constructor-arg name="claz" value="org.geant.idpextension.oidc.metadata.resolver.ClientInformationResolver" />
            <constructor-arg name="strategy">
                <bean class="org.geant.idpextension.oidc.profile.spring.relyingparty.metadata.impl.ClientInformationResolverServiceStrategy" />
            </constructor-arg>
        </bean>

        <bean id="shibboleth.ClientInformationResolver"
            class="org.geant.idpextension.oidc.metadata.impl.ReloadingRelyingPartyClientInformationProvider"
            c:resolverService-ref="shibboleth.ClientInformationResolverService" />

        <util:list id="shibboleth.ClientInformationResolverResources">
            <value>/opt/shibboleth-idp/conf/oidc-metadata-providers.xml</value>
        </util:list>

- name: Set additions to global.xml 
  blockinfile:
    dest: "{{ idp_home }}/conf/global.xml"
    marker: "<!-- {mark} ANSIBLE MANAGED BLOCK for oidc extension additions to global.xml -->"
    insertafter: "Use this file to define any custom beans needed globally"
    content: |
        <!-- Returns true unless subject is already populated in oidc response context. -->
        <bean id="SubjectRequired"
            class="org.geant.idpextension.oidc.profile.logic.SubjectActivationCondition"/>

        <!-- Returns true if client has registered public subject and subject is not already populated in oidc response context --> 
        <bean id="PublicRequired" parent="shibboleth.Conditions.AND">
            <constructor-arg>
                <list>
                    <bean class="org.geant.idpextension.oidc.profile.logic.SubjectActivationCondition" />
                    <bean class="org.geant.idpextension.oidc.profile.logic.PublicSubjectActivationCondition" />
                </list>
            </constructor-arg>
        </bean>
        
        <!-- Returns true if client has registered pairwise subject and subject is not already populated in oidc response context --> 
        <bean id="PairwiseRequired" parent="shibboleth.Conditions.AND">
            <constructor-arg>
                <list>
                    <bean class="org.geant.idpextension.oidc.profile.logic.SubjectActivationCondition" />
                    <bean class="org.geant.idpextension.oidc.profile.logic.PairwiseSubjectActivationCondition" />
                </list>
            </constructor-arg>
        </bean>
        
        <!-- List of reserved claims that will not be populated to id token using standard user claim population mechanims -->
        <util:list id="shibboleth.oidc.IDTokenReservedClaimNames">
            <value>aud</value>
            <value>iss</value>
            <value>sub</value>
            <value>iat</value>
            <value>exp</value>
            <value>acr</value>
            <value>aud</value>
            <value>auth_time</value>
            <value>at_hash</value>
            <value>c_hash</value>
            <value>nonce</value>
        </util:list>
        
        <!-- List of reserved claims that will not be populated to user info response using standard user claim population mechanims -->
        <util:list id="shibboleth.oidc.UserInfoReservedClaimNames">
            <value>aud</value>
            <value>iss</value>
            <value>sub</value>
        </util:list>
     
- name: Copy relying-party.xml
  template: src={{ playbook_dir }}/roles/oidc-extension/templates/{{item}} dest=/opt/shibboleth-idp/conf/{{item}}
  with_items:
    - "relying-party.xml"

- name: Add oidc-subject.properties and idp-oidc.properties to be included confs in idp.properties
  lineinfile:
    dest: /opt/shibboleth-idp/conf/idp.properties
    regexp: '(idp.additionalProperties.*)'
    line: '\1, /conf/oidc-subject.properties, /conf/idp-oidc.properties'
    backrefs: yes
    
- template: src={{ playbook_dir }}/roles/oidc-extension/templates/{{item}} dest=/opt/shibboleth-idp/conf/{{item}}
  with_items:
    - "logback.xml"

- template: src={{ playbook_dir }}/roles/oidc-extension/templates/{{item}} dest=/opt/shibboleth-idp/metadata/{{item}}
  with_items:
    - "oidc-client.json"

- name: copying jwk for signing id tokens
  template: src={{ playbook_dir }}/roles/oidc-extension/templates/{{item}} dest=/opt/shibboleth-idp/credentials/{{item}}
  with_items:
    - "idp-signing-rs.jwk"
    - "idp-signing-es.jwk"

- name: copying key to be published
  template: src={{ playbook_dir }}/roles/oidc-extension/templates/{{item}} dest=/opt/shibboleth-idp/static/oidc/{{item}}
  with_items:
    - "keyset.jwk"

- name: Setting static.xml for jetty to serve static content
  template: 
    src: static.xml 
    dest: "{{ idp_home }}/jetty-base/webapps/static.xml"

- name: Enable rewrite module in Jetty
  template:
    src: rewrite.ini
    dest: "{{ idp_home }}/jetty-base/start.d/rewrite.ini"

- name: Setting jetty-rewrite.xml for jetty to rewrite webfinger
  template:
    src: jetty-rewrite.xml
    dest: "{{ idp_home }}/jetty-base/etc/jetty-rewrite.xml"

- name: Apply attribute-resolver-oidc.xml
  copy:
    src: "{{ idp_home }}/conf/attribute-resolver-oidc.xml"
    dest: "{{ idp_home }}/conf/attribute-resolver.xml"
    remote_src: yes

- name: Apply oidc attribute-filter-oidc.xml
  copy:
    src: "{{ idp_home }}/conf/attribute-filter-oidc.xml"
    dest: "{{ idp_home }}/conf/attribute-filter.xml"
    remote_src: yes

- name: Setting modified general-authn.xml
  template:
    src: general-authn.xml
    dest: "{{ idp_home }}/conf/authn/general-authn.xml"

- name: Setting modified authn-comparison.xml
  template:
    src: authn-comparison.xml
    dest: "{{ idp_home }}/conf/authn/authn-comparison.xml"

- name: Setting modified login.vm
  template:
    src: login.vm
    dest: "{{ idp_home }}/views/login.vm"

- name: Setting index.html containing authentication links
  template:
    src: index.html
    dest: "{{ idp_home }}/static/index.html"

- name: Setting op metadata file
  template:
    src: openid-configuration
    dest: "{{ idp_home }}/static/.well-known/openid-configuration"

- name: Restart shibboleth idp
  service:
    name: shibboleth-idp
    state: restarted

- template: src={{ playbook_dir }}/roles/oidc-extension/ldif/{{item}} dest=/tmp/{{item}}
  with_items:
    - "aci-{{ aci | regex_replace('(^.*)@(.*)$','\\1') }}.ldif"

- set_fact:
    acifile: "/tmp/aci-{{ aci | regex_replace('(^.*)@(.*)$','\\1') }}.ldif"
  when: aci is defined

- name: ACI | Add
  shell: ldapmodify -x -D "{{ dirsrv_rootdn }}" -H ldap://localhost:389 -w {{ dirsrv_password }} -f {{ acifile }}
  ignore_errors: yes
  when: aci is defined

- name: Apache |Â mod_auth_openidc
  package: name=mod_auth_openidc state=present

- name: Apache |Â mod_php
  package: name=mod_php state=present

- name: Set mod_auth_openidc properties
  blockinfile:
    dest: "/etc/httpd/conf.d/auth_openidc.conf"
    marker: "# {mark} ANSIBLE MANAGER BLOCK"
    insertafter: "#OIDCUserInfoRefreshInterval <seconds>"
    content: |
         OIDCOAuthSSLValidateServer Off
         OIDCSSLValidateServer Off
         OIDCRedirectURI https://192.168.0.150:8443/protected/redirect_uri
         OIDCCryptoPassphrase secret
         OIDCMetadataDir /var/cache/httpd/mod_auth_openidc/metadata
         OIDCResponseType "code"
         OIDCScope "openid profile email address phone"
         <Location /protected/>
             authtype openid-connect
             require valid-user
         </Location>

- name: Ensure /var/www/html/protected dir exists
  file: path="/var/www/html/protected" state=directory

- name: Copy index.php for presenting logged in user information
  template: src={{ playbook_dir }}/roles/oidc-extension/templates/{{item}} dest=/var/www/html/protected/{{item}}
  with_items:
    - "index.php"

- name: Set httpd enabled and restart
  service:
    name: httpd
    state: restarted
    enabled: yes

