---

- name: Ensure "{{ idp_home }}/views/oidc" dir exists
  file: path="{{ idp_home }}/views/oidc" state=directory

- name: Ensure "{{ idp_home }}/flows/oidc" dir exists
  file: path="{{ idp_home }}/flows/oidc" state=directory

- name: Ensure "{{ idp_home }}/flows/oidc/authorize" dir exists
  file: path="{{ idp_home }}/flows/oidc/authorize" state=directory

- name: Ensure "{{ idp_home }}/flows/oidc/register" dir exists
  file: path="{{ idp_home }}/flows/oidc/register" state=directory

- name: Ensure "{{ idp_home }}/flows/oidc/webfinger" dir exists
  file: path="{{ idp_home }}/flows/oidc/webfinger" state=directory

- name: Ensure "{{ idp_home }}/static" dir exists
  file: path="{{ idp_home }}/static/" state=directory

- name: Ensure "{{ idp_home }}/static/oidc/" dir exists
  file: path="{{ idp_home }}/static/oidc/" state=directory

- name: Ensure "{{ idp_home }}/static/.well-known/" dir exists
  file: path="{{ idp_home }}/static/.well-known/" state=directory

- name: Copy oidc flow, views and beans
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: 0644
    remote_src: no
  with_items:
    - { src: "{{ playbook_dir }}/idp-oidc-extension-impl/src/main/resources/flows/oidc/authorize/oidc-flow.xml", dest: "{{ idp_home }}/flows/oidc/authorize/oidc-flow.xml" }
    - { src: "{{ playbook_dir }}/idp-oidc-extension-impl/src/main/resources/flows/oidc/authorize/oidc-beans.xml", dest: "{{ idp_home }}/flows/oidc/authorize/oidc-beans.xml" }
    - { src: "{{ playbook_dir }}/idp-oidc-extension-impl/src/main/resources/flows/oidc/register/oidc-flow.xml", dest: "{{ idp_home }}/flows/oidc/register/oidc-flow.xml" }
    - { src: "{{ playbook_dir }}/idp-oidc-extension-impl/src/main/resources/flows/oidc/register/oidc-beans.xml", dest: "{{ idp_home }}/flows/oidc/register/oidc-beans.xml" }
    - { src: "{{ playbook_dir }}/idp-oidc-extension-impl/src/main/resources/flows/oidc/webfinger/oidc-flow.xml", dest: "{{ idp_home }}/flows/oidc/webfinger/oidc-flow.xml" }
    - { src: "{{ playbook_dir }}/idp-oidc-extension-impl/src/main/resources/flows/oidc/webfinger/oidc-beans.xml", dest: "{{ idp_home }}/flows/oidc/webfinger/oidc-beans.xml" }
    - { src: "{{ playbook_dir }}/idp-oidc-extension-impl/src/main/resources/views/oidc-error.vm", dest: "{{ idp_home }}/views/oidc/authorize-error.vm" }

- name: Copy selected JARs for building new idp.war
  copy:
    src: "{{ item }}"
    dest: "{{ idp_home }}/edit-webapp/WEB-INF/lib/"
    owner: root
    group: root
    mode: 0644
  with_fileglob:
    - "{{ playbook_dir }}/idp-oidc-extension-impl/target/dependency/nimbus-jose-jwt*.jar"
    - "{{ playbook_dir }}/idp-oidc-extension-impl/target/dependency/oauth2-oidc-sdk*.jar"
    - "{{ playbook_dir }}/idp-oidc-extension-impl/target/dependency/json-smart-*.jar"
    - "{{ playbook_dir }}/idp-oidc-extension-impl/target/dependency/accessors-smart-*.jar"
    - "{{ playbook_dir }}/idp-oidc-extension-impl/target/dependency/lang-tag-*.jar"
    - "{{ playbook_dir }}/idp-oidc-extension-impl/target/dependency/commons-lang3-*.jar"
    - "{{ playbook_dir }}/idp-oidc-extension-impl/target/dependency/commons-collections4-*.jar"
    - "{{ playbook_dir }}/idp-oidc-extension-impl/target/dependency/gson-*.jar"
    - "{{ playbook_dir }}/idp-oidc-extension-impl/target/dependency/idp-oidc-extension-api-*.jar"
    - "{{ playbook_dir }}/idp-oidc-extension-impl/target/dependency/oidcfederatedmetadatastatement-*.jar"
    - "{{ playbook_dir }}/idp-oidc-extension-impl/target/idp-oidc-extension-impl-*.jar"

- name: Build new idp.war
  shell: source {{ environment_file }} && "{{ idp_home }}/bin/build.sh"
  become_user: root

- name: configure shibboleth-idp ldap.properties
  lineinfile: dest={{ idp_home }}/conf/ldap.properties regexp="^#?\s*({{ item.option }}\s*=)" backrefs=yes  line="\\1 {{ item.value }}"
  with_items:
    - { option: 'idp.authn.LDAP.authenticator', value: 'bindSearchAuthenticator'}
    - { option: 'idp.authn.LDAP.ldapURL', value: 'ldap://{{ hostvars[inventory_hostname].service_name }}:389' }
    - { option: 'idp.authn.LDAP.useStartTLS', value: 'false' }
    - { option: 'idp.authn.LDAP.useSSL', value: 'false' }
    - { option: 'idp.authn.LDAP.baseDN', value: 'ou=People,{{ dirsrv_suffix }}' }
    - { option: 'idp.authn.LDAP.bindDN', value: 'cn=Directory Manager' }
    - { option: 'idp.authn.LDAP.bindDNCredential', value: '{{ dirsrv_password }}' }

- name: configure shibboleth-idp idp.properties
  lineinfile: dest={{ idp_home }}/conf/idp.properties regexp="^#?\s*({{ item.option }}\s*=)" backrefs=yes  line="\\1 {{ item.value }}"
  with_items:
    - { option: 'idp.session.StorageService', value: 'shibboleth.StorageService' }
    - { option: 'idp.entityID', value: 'https://{{ service_name }}' }

- name: Set oidc issuer to idp.properties
  blockinfile:
    dest: "{{ idp_home }}/conf/idp.properties"
    marker: "# {mark} ANSIBLE MANAGER BLOCK"
    insertafter: "idp.entityID"
    content: |
         idp.oidc.issuer= https://{{ service_name }}

- name: Set oidc registration properties to idp.properties
  blockinfile:
    dest: "{{ idp_home }}/conf/idp.properties"
    marker: "# {mark} ANSIBLE MANAGER BLOCK 2"
    insertafter: "idp.oidc.issuer"
    content: |
         idp.oidc.dynreg.StorageService = shibboleth.JPAStorageService
         idp.oidc.dynreg.defaultValidity = PT24H

- name: Add one trusted test SP
  blockinfile:
    dest: "{{ idp_home }}/conf/metadata-providers.xml"
    marker: "<!-- {mark} ANSIBLE MANAGED BLOCK -->"
    insertbefore: "</MetadataProvider>"
    content: |
          <MetadataProvider id="HTTPMetadata"
                            xsi:type="FileBackedHTTPMetadataProvider"
                            backingFile="/tmp/metadatacopy.xml"
                            metadataURL="https://mpass-proxy-test.csc.fi/attributetest/Shibboleth.sso/Metadata"> 
              <MetadataFilter xsi:type="EntityRoleWhiteList">
                  <RetainedRole>md:SPSSODescriptor</RetainedRole>
              </MetadataFilter>
          </MetadataProvider>

- name: Add default oidc credentials to credentials.xml
  blockinfile:
    dest: "{{ idp_home }}/conf/credentials.xml"
    marker: "<!-- {mark} ANSIBLE MANAGED BLOCK -->"
    insertafter: "default signing key"
    content: |
         <bean id="shibboleth.oidc.DefaultSigningCredential"
             class="org.geant.idpextension.oidc.profile.spring.factory.BasicJWKCredentialFactoryBean"
             p:jWKResource="%{idp.signing.oidc.key}" />

- name: Set oidc credential to idp.properties       
  blockinfile:
    dest: "{{ idp_home }}/conf/idp.properties"
    marker: "# {mark} ANSIBLE MANAGED BLOCK"
    insertafter: "idp.signing.key"
    content: |
         idp.signing.oidc.key= %{idp.home}/credentials/idp-signing-rs256.jwk

- name: Add metadata filter for trusted test SP
  blockinfile:
    dest: "{{ idp_home }}/conf/attribute-filter.xml"
    marker: "<!-- {mark} ANSIBLE MANAGED BLOCK -->"
    insertbefore: "</AttributeFilterPolicyGroup>"
    content: |
         <AttributeFilterPolicy id="demo_rp">
             <PolicyRequirementRule xsi:type="Requester" value="demo_rp" />
             <AttributeRule attributeID="eduPersonPrincipalName">
                 <PermitValueRule xsi:type="ANY" />
             </AttributeRule>
             <AttributeRule attributeID="age">
                 <PermitValueRule xsi:type="ANY" />
             </AttributeRule>
             <AttributeRule attributeID="eduPersonAffiliation">
                 <PermitValueRule xsi:type="ANY" />
             </AttributeRule>
             <AttributeRule attributeID="uid">
                 <PermitValueRule xsi:type="ANY" />
             </AttributeRule>
             <AttributeRule attributeID="mail">
                 <PermitValueRule xsi:type="ANY" />
             </AttributeRule>
         </AttributeFilterPolicy>

- name: Add FilterActiveAuthenticationResultsByMaxAge and OIDCSelectAuthenticationFlow beans to authn-beans.xml. SYSTEM FILE CHANGE!!
  blockinfile:
    dest: "{{ idp_home }}/system/flows/authn/authn-beans.xml"
    marker: "<!-- {mark} ANSIBLE MANAGED BLOCK -->"
    insertafter: "net.shibboleth.idp.profile.impl.ProfileActionBeanPostProcessor"
    content: |
        <bean id="FilterActiveAuthenticationResultsByMaxAge"
            class="org.geant.idpextension.oidc.authn.impl.FilterActiveAuthenticationResultsByMaxAge"
            scope="prototype" />
            
        <bean id="OIDCSelectAuthenticationFlow"
            class="org.geant.idpextension.oidc.authn.impl.SelectAuthenticationFlow" scope="prototype"
            p:favorSSO="%{idp.authn.favorSSO:false}" />

- name: Copy authn-flow.xml to authn-oidc-flow.xml. SYSTEM DIRECTORY CHANGE!!
  copy:
    src: "{{ idp_home }}/system/flows/authn/authn-flow.xml"
    dest: "{{ idp_home }}/system/flows/authn/authn-oidc-flow.xml"
    remote_src: yes

- name: Add FilterActiveAuthenticationResultsByMaxAge expression to authn-oidc-flow.xml. SYSTEM DIRECTORY CHANGE!!
  blockinfile:
    dest: "{{ idp_home }}/system/flows/authn/authn-oidc-flow.xml"
    marker: "<!-- {mark} ANSIBLE MANAGED BLOCK -->"
    insertafter: "ExtractActiveAuthenticationResults"
    content: |
        <evaluate expression="FilterActiveAuthenticationResultsByMaxAge" />

- name: Replace SelectAuthenticationFlow with OIDCSelectAuthenticationFlow in authn-oidc-flow.xml. SYSTEM DIRECTORY CHANGE!!        
  replace:
    dest: "{{ idp_home }}/system/flows/authn/authn-oidc-flow.xml"
    regexp: "expression=\"SelectAuthenticationFlow\""
    replace: "expression=\"OIDCSelectAuthenticationFlow\""

- name: Activate the new authn-oidc flow. SYSTEM FILE CHANGE!!
  blockinfile:
    dest: "{{ idp_home }}/system/conf/webflow-config.xml"
    marker: "<!-- {mark} ANSIBLE MANAGED BLOCK -->"
    insertafter: "../system/flows/authn/authn-flow.xml"
    content: |
         <entry key="authn-oidc" value="../system/flows/authn/authn-oidc-flow.xml" />

- name: Add OIDC client information resolver service to services-system.xml
  blockinfile:
    dest: "{{ idp_home }}/system/conf/services-system.xml"
    marker: "<!-- {mark} ANSIBLE MANAGED BLOCK -->"
    insertbefore: "<bean id=\"shibboleth.LoggingService"
    content: |
        <bean id="shibboleth.ClientInformationResolverService" class="net.shibboleth.ext.spring.service.ReloadableSpringService"
                depends-on="shibboleth.AttributeResolverService"
                p:serviceConfigurations-ref="shibboleth.ClientInformationResolverResources"
                p:failFast="%{idp.service.metadata.failFast:%{idp.service.failFast:false}}"
                p:reloadCheckDelay="%{idp.service.metadata.checkInterval:PT0S}"
                p:beanFactoryPostProcessors-ref="shibboleth.PropertySourcesPlaceholderConfigurer">
            <constructor-arg name="claz" value="org.geant.idpextension.oidc.metadata.resolver.ClientInformationResolver" />
            <constructor-arg name="strategy">
                <bean class="org.geant.idpextension.oidc.profile.spring.relyingparty.metadata.impl.ClientInformationResolverServiceStrategy" />
            </constructor-arg>
        </bean>

        <bean id="shibboleth.ClientInformationResolver"
            class="org.geant.idpextension.oidc.metadata.impl.ReloadingRelyingPartyClientInformationProvider"
            c:resolverService-ref="shibboleth.ClientInformationResolverService" />

        <util:list id="shibboleth.ClientInformationResolverResources">
            <value>/opt/shibboleth-idp/conf/oidc-metadata-providers.xml</value>
        </util:list>


- name: Add OIDC name identifier generation to services-system.xml  - SYSTEM DIRECTORY CHANGE!!
  blockinfile:
    dest: "{{ idp_home }}/system/conf/services-system.xml"
    marker: "<!-- {mark} ANSIBLE MANAGED BLOCK  for OIDC NameIdentifierGenerationService and OIDC relying party -->"
    insertbefore: "<bean id=\"shibboleth.NameIdentifierGenerationService"
    content: |
        <bean id="shibboleth.oidc.NameIdentifierGenerationService" class="net.shibboleth.ext.spring.service.ReloadableSpringService"
            c:claz="net.shibboleth.idp.saml.nameid.NameIdentifierGenerationService"
            p:serviceConfigurations-ref="#{'%{idp.service.oidc.nameidGeneration.resources:shibboleth.oidc.NameIdentifierGenerationResources}'.trim()}"
            p:failFast="%{idp.service.oidc.nameidGeneration.failFast:%{idp.service.failFast:false}}"
            p:reloadCheckDelay="%{idp.service.oidc.nameidGeneration.checkInterval:PT0S}"
            p:beanPostProcessors-ref="shibboleth.IdentifiableBeanPostProcessor"
            p:beanFactoryPostProcessors-ref="shibboleth.PropertySourcesPlaceholderConfigurer" />

- name: Add OIDC name identifier generation to services.xml
  blockinfile:
    dest: "{{ idp_home }}/conf/services.xml"
    marker: "<!-- {mark} ANSIBLE MANAGED BLOCK  for OIDC NameIdentifierGenerationResources -->"
    insertbefore: "list id =\"shibboleth.NameIdentifierGenerationResources"
    content: |
        <util:list id ="shibboleth.oidc.NameIdentifierGenerationResources">
            <value>%{idp.home}/conf/oidc-subject.xml</value>
            <value>%{idp.home}/system/conf/oidc-subject-system.xml</value>
        </util:list>
     

- name: Copy relying-party.xml, oidc-relying-party.xml, oidc-subject.xml and oidc-subject.properties
  template: src={{ playbook_dir }}/roles/oidc-extension/templates/{{item}} dest=/opt/shibboleth-idp/conf/{{item}}
  with_items:
    - "oidc-subject.xml"
    - "oidc-subject.properties"
    - "oidc-relying-party.xml"
    - "relying-party.xml"

- name: Add oidc-subject.properties to included confs in idp.properties
  lineinfile:
    dest: /opt/shibboleth-idp/conf/idp.properties
    regexp: '(idp.additionalProperties.*)'
    line: '\1, /conf/oidc-subject.properties'
    backrefs: yes

- name: Copy oidc-subject-system.xml - SYSTEM DIRECTORY CHANGE!!
  template: src={{ playbook_dir }}/roles/oidc-extension/templates/{{item}} dest=/opt/shibboleth-idp/system/conf/{{item}}
  with_items:
    - "oidc-subject-system.xml"
    
- template: src={{ playbook_dir }}/roles/oidc-extension/templates/{{item}} dest=/opt/shibboleth-idp/conf/{{item}}
  with_items:
    - "logback.xml"
    - "oidc-metadata-providers.xml"

- template: src={{ playbook_dir }}/roles/oidc-extension/templates/{{item}} dest=/opt/shibboleth-idp/metadata/{{item}}
  with_items:
    - "oidc-client.json"

- name: copying jwk for signing id tokens
  template: src={{ playbook_dir }}/roles/oidc-extension/templates/{{item}} dest=/opt/shibboleth-idp/credentials/{{item}}
  with_items:
    - "idp-signing-rs256.jwk"

- name: copying key to be published
  template: src={{ playbook_dir }}/roles/oidc-extension/templates/{{item}} dest=/opt/shibboleth-idp/static/oidc/{{item}}
  with_items:
    - "keyset.jwk"

- name: Setting static.xml for jetty to serve static content
  template: 
    src: static.xml 
    dest: "{{ idp_home }}/jetty-base/webapps/static.xml"

- name: Enable rewrite module in Jetty
  template:
    src: rewrite.ini
    dest: "{{ idp_home }}/jetty-base/start.d/rewrite.ini"

- name: Setting jetty-rewrite.xml for jetty to rewrite webfinger
  template:
    src: jetty-rewrite.xml
    dest: "{{ idp_home }}/jetty-base/etc/jetty-rewrite.xml"

- name: Setting modified attribute-resolver.xml
  template:
    src: attribute-resolver.xml
    dest: "{{ idp_home }}/conf/attribute-resolver.xml"

- name: Setting modified attribute-filter.xml
  template:
    src: attribute-filter.xml
    dest: "{{ idp_home }}/conf/attribute-filter.xml"

- name: Setting modified general-authn.xml
  template:
    src: general-authn.xml
    dest: "{{ idp_home }}/conf/authn/general-authn.xml"

- name: Setting modified authn-comparison.xml
  template:
    src: authn-comparison.xml
    dest: "{{ idp_home }}/conf/authn/authn-comparison.xml"

- name: Setting index.html containing authentication links
  template:
    src: index.html
    dest: "{{ idp_home }}/static/index.html"

- name: Setting op metadata file
  template:
    src: openid-configuration
    dest: "{{ idp_home }}/static/.well-known/openid-configuration"

- name: Restart shibboleth idp
  service:
    name: shibboleth-idp
    state: restarted

- template: src={{ playbook_dir }}/roles/oidc-extension/ldif/{{item}} dest=/tmp/{{item}}
  with_items:
    - "aci-{{ aci | regex_replace('(^.*)@(.*)$','\\1') }}.ldif"

- set_fact:
    acifile: "/tmp/aci-{{ aci | regex_replace('(^.*)@(.*)$','\\1') }}.ldif"
  when: aci is defined

- name: ACI | Add
  shell: ldapmodify -x -D "{{ dirsrv_rootdn }}" -H ldap://localhost:389 -w {{ dirsrv_password }} -f {{ acifile }}
  ignore_errors: yes
  when: aci is defined


