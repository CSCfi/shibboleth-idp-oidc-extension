<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"
                           
       default-init-method="initialize"
       default-destroy-method="destroy">

    
    <!-- The actual plugins for public and pairwise subject identifiers. -->
    
    <bean id="shibboleth.PublicSubjectGenerator" lazy-init="true"
            class="net.shibboleth.idp.saml.nameid.impl.PersistentSAML2NameIDGenerator"
            p:format="public"
            p:omitQualifiers="true"
            p:sPNameQualifier="%{idp.oidc.subject.publicqualifier:public}"
            p:useUnfilteredAttributes="%{idp.oidc.subject.useUnfilteredAttributes:true}"
            p:persistentIdGenerator-ref="#{'%{idp.oidc.subject.generator:shibboleth.oidc.subject.ComputedPersistentIdGenerator}'.trim()}">
        <property name="defaultSPNameQualifierLookupStrategy">
            <null/>
        </property>    
        <property name="attributeSourceIds">
            <bean parent="shibboleth.CommaDelimStringArray" c:_0="#{'%{idp.oidc.subject.sourceAttribute:}'.trim()}" />
        </property>
    </bean>

    <bean id="shibboleth.PairwiseSubjectGenerator" lazy-init="true"
            class="net.shibboleth.idp.saml.nameid.impl.PersistentSAML2NameIDGenerator"
            p:format="pairwise"
            p:defaultSPNameQualifierLookupStrategy-ref="shibboleth.SectorIdentifierLookupFunction"
            p:useUnfilteredAttributes="%{idp.oidc.subject.useUnfilteredAttributes:true}"
            p:persistentIdGenerator-ref="#{'%{idp.oidc.subject.generator:shibboleth.oidc.subject.ComputedPersistentIdGenerator}'.trim()}">
        <property name="attributeSourceIds">
            <bean parent="shibboleth.CommaDelimStringArray" c:_0="#{'%{idp.oidc.subject.sourceAttribute:}'.trim()}" />
        </property>
    </bean>

    <bean id="shibboleth.SectorIdentifierLookupFunction" 
            class="org.geant.idpextension.oidc.profile.context.navigate.SectorIdentifierLookupFunction"/>
    
    <!--
    These are strategy implementations for generating persistent subject identifiers.
    They're configured using properties, and usually selected for injection into the actual
    generation plugins by other properties, so they aren't all in use in a given system,
    but are all defined to simplify configuration.
    
    The Stored generator is a special case in that it requires a storage object, usually
    a JDBC-based implementation. By marking it lazy-init, we avoid loading it unless it's
    actually selected for use.
    -->

    <bean id="shibboleth.oidc.subject.ComputedPersistentIdGenerator" lazy-init="true"
        class="net.shibboleth.idp.saml.nameid.impl.ComputedPersistentIdGenerationStrategy"
        p:encoding="BASE32"
        p:salt="%{idp.oidc.subject.salt:}"
        p:encodedSalt="%{idp.oidc.subject.encodedSalt:}"
        p:algorithm="%{idp.oidc.subject.algorithm:SHA}" />

    <bean id="shibboleth.oidc.subject.StoredPersistentIdGenerator" lazy-init="true"
        class="net.shibboleth.idp.saml.nameid.impl.StoredPersistentIdGenerationStrategy"
        p:computedIdStrategy="#{getObject('%{idp.oidc.subject.computed:shibboleth.oidc.subject.ComputedPersistentIdGenerator}'.trim())}"
        p:IDStore="#{getObject('%{idp.oidc.subject.store:undefined}'.trim())}"
        p:dataSource="#{getObject('%{idp.oidc.subject.dataSource:undefined}'.trim())}" />
    
    <!-- Parent bean for users to configure a custom ID store rather than a data source only. -->
    <bean id="shibboleth.JDBCPersistentIdStore" abstract="true"
        class="net.shibboleth.idp.saml.nameid.impl.JDBCPersistentIdStoreEx" />
    
    <!--
    This is the actual service being exposed, and it takes generators that are
    actually wrappers around generator lists defined by the deployer.
    -->
    
    <bean class="org.geant.idpextension.oidc.nameid.impl.NameIdentifierGenerationServiceImpl">
        <property name="SubjectGenerator">
            <bean class="org.opensaml.saml.saml2.profile.impl.ChainingSAML2NameIDGenerator"
                p:generators-ref="shibboleth.SubjectGenerators"
                p:defaultGenerator="#{getObject('%{idp.oidc.subject.defaultGenerator:}'.trim())}" />    
        </property>
    </bean>
        
</beans>
