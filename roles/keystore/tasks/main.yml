---
# role: keystore
  - set_fact:
      crt: "{{ hostvars[inventory_hostname].service_name }}.crt"
      key: "{{ hostvars[inventory_hostname].service_name }}.key"
      ca: [[ 'DigiCertCA.crt','TrustedRoot.crt' ]]
      idp_keystore_dst: /opt/shibboleth-idp/credentials/keystore.jks
      dirsrv_keystore_dst: "/etc/dirsrv/slapd-{{ hostvars[inventory_hostname].host_name }}/"
      chain: DigiCertBundle.crt
      force: no
      crt_dir: "{{ playbook_dir }}/roles/keystore/files"

  - name: Check | exists | {{ crt_dir }}/{{ crt }}
    local_action: stat path={{ crt_dir }}/{{ crt }}
    become: no
    register: stat_crt

  - name: Check | exists | {{ crt_dir }}/{{ key }}
    local_action: stat path={{ crt_dir }}/{{ key }}
    become: no
    register: stat_key

  - name: Generate | self-signed | certificates
    local_action: shell openssl req -subj '/CN={{ hostvars[inventory_hostname].service_name }}/O=CSC/C=FI' -newkey rsa:2048 -days 3650 -nodes -x509 -keyout {{ crt_dir }}/{{ key }} -out {{ crt_dir }}/{{ crt }}
    become: no
    when: ( stat_crt.stat.exists == false  and stat_key.stat.exists == false )

  - copy: src={{ crt_dir }}/{{ crt }} dest="/etc/pki/tls/certs/{{ crt }}" force={{ force }}
  - copy: src={{ crt_dir }}/{{ key }} dest="/etc/pki/tls/private/{{ key }}" mode=0666 force={{ force }}
  - copy: src={{ crt_dir }}/{{ chain }} dest="/etc/pki/tls/certs//{{ chain }}" force={{ force }}
  - copy: src={{ crt_dir }}/{{ item }} dest="/etc/pki/tls/certs/{{ item }}" force={{ force }}
    with_items: "{{ ca }}"

  - name: dirsrv | generate | keystore 
    command: openssl pkcs12 -export -out /tmp/keystore-389.p12 -inkey /etc/pki/tls/private/{{ key }} -in /etc/pki/tls/certs/{{ crt }} -certfile /etc/pki/tls/certs/{{ chain }} -name 'Server-Cert' -password 'pass:' -nodes creates=/tmp/keystore-389.pl
    when: dirsrv is defined
  - command: "{{ item }}" 
    with_items: 
      - pk12util -i /tmp/keystore-389.p12 -d {{ dirsrv_keystore_dst }} -W '' -K ''
      - certutil -d /etc/dirsrv/slapd-{{hostvars[inventory_hostname].host_name}}/ -A -n "DigiCertCA"  -t CT,, -a -i /etc/pki/tls/certs/DigiCertCA.crt
      - certutil -d /etc/dirsrv/slapd-{{hostvars[inventory_hostname].host_name}}/ -A -n "TrustedRoot" -t CT,, -a -i /etc/pki/tls/certs/TrustedRoot.crt
      - pk12util -i /tmp/keystore-389.p12 -d /etc/dirsrv/admin-serv/ -W '' -K ''
      - certutil -d /etc/dirsrv/admin-serv/ -A -n "DigiCertCA"  -t CT,, -a -i /etc/pki/tls/certs/DigiCertCA.crt
      - certutil -d /etc/dirsrv/admin-serv/ -A -n "TrustedRoot" -t CT,, -a -i /etc/pki/tls/certs/TrustedRoot.crt
    when: dirsrv is defined

  - name: IdP | delete | keystore
    file: path=/tmp/keystore-idp.p12 state=absent
    when: idp is defined
  - file: path="{{ idp_keystore_dst }}" state=absent
    when: idp is defined

  - name: IdP | generate | keystore 
    command: openssl pkcs12 -export -out /tmp/keystore-idp.p12 -inkey /etc/pki/tls/private/{{ key }} -in /etc/pki/tls/certs/{{ crt }} -certfile /etc/pki/tls/certs/{{ chain }} -name 'Server-Cert' -password 'pass:{{ keystore_password }}' creates=/tmp/keystore-idp.p12
    when: idp is defined
  - name:  Create keystore.jks from p12 file
    command: keytool -importkeystore -srckeystore /tmp/keystore-idp.p12 -srcstoretype PKCS12 -destkeystore {{ idp_keystore_dst }} -srcstorepass '{{ keystore_password }}' -deststorepass '{{ keystore_password }}' creates={{ idp_keystore_dst }}
    when: idp is defined

  - name: IdP | symlinks | credentials| idp-signing/idp-encryption
    file: src={{ item.src }} dest={{ item.dest }} state=link force=yes
    with_items:
    - { src: '/etc/pki/tls/certs/{{ crt }}', dest: '/opt/shibboleth-idp/credentials/idp-encryption.crt' }
    - { src: '/etc/pki/tls/certs/{{ crt }}', dest: '/opt/shibboleth-idp/credentials/idp-signing.crt' }
    - { src: '/etc/pki/tls/private/{{ key }}', dest: '/opt/shibboleth-idp/credentials/idp-encryption.key' }
    - { src: '/etc/pki/tls/private/{{ key }}', dest: '/opt/shibboleth-idp/credentials/idp-signing.key' }
    - { src: '/etc/pki/tls/certs/{{ crt }}', dest: '/etc/pki/ca-trust/source/anchors/{{ crt }}' }
      # Last one is used by java updates cacerts file from contents of earlier directory with following command 'update-ca-trust'
    when: idp is defined

  - name: Update cacerts
    shell: /bin/update-ca-trust
    when: idp is defined

#  - name: Symlink certificates
#    command: chdir=/etc/openldap/certs/ {{ item }}
#    with_items:
#      - "ln -sf /etc/pki/tls/certs/DigiCertCA.crt `openssl x509 -in /etc/pki/tls/certs/DigiCertCA.crt -noout -hash`.0"
#      - "ln -sf /etc/pki/tls/certs/TrustedRoot.crt `openssl x509 -in /etc/pki/tls/certs/TrustedRoot.crt -noout -hash`.0"
#      - "ln -sf /etc/pki/tls/certs/{{ hostvars[inventory_hostname].service_name }}.crt `openssl x509 -in /etc/pki/tls/certs/{{ hostvars[inventory_hostname].service_name }}.crt -noout -hash`.0"
    
  - shell: ln -sf /etc/pki/tls/certs/DigiCertCA.crt `openssl x509 -in /etc/pki/tls/certs/DigiCertCA.crt -noout -hash`.0
    args:
      chdir: /etc/openldap/certs 
      creates: /etc/openldap/certs/`openssl x509 -in /etc/pki/tls/certs/DigiCertCA.crt -noout -hash`.0
    when: ldaphashes is defined

  - shell: ln -sf /etc/pki/tls/certs/TrustedRoot.crt `openssl x509 -in /etc/pki/tls/certs/TrustedRoot.crt -noout -hash`.0 
    args:
      chdir: /etc/openldap/certs 
      creates: /etc/openldap/certs/`openssl x509 -in /etc/pki/tls/certs/TrustedRoot.crt -noout -hash`.0
    when: ldaphashes is defined

  - shell: ln -sf /etc/pki/tls/certs/{{ crt }} `openssl x509 -in /etc/pki/tls/certs/{{ crt }} -noout -hash`.0 
    args:
      chdir: /etc/openldap/certs 
      creates: /etc/openldap/certs/`openssl x509 -in /etc/pki/tls/certs/{{ crt }} -noout -hash`.0
    when: ldaphashes is defined

  - lineinfile: dest=/etc/openldap/ldap.conf regexp="^TLS_CACERTDIR " line="TLS_CACERTDIR /etc/openldap/certs/" owner=root group=root mode=0644
    when: ldaphashes is defined
  
  - lineinfile: dest=/etc/openldap/ldap.conf regexp="^TLS_REQCERT " line="TLS_REQCERT never" owner=root group=root mode=0644
    when: ldaphashes is defined

    #  - command: openssl pkcs12 -export -inkey /etc/pki/tls/private/{{ hostvars[inventory_hostname].service_name }}.key -in /etc/pki/tls/certs/{{ hostvars[inventory_hostname].service_name }}.crt -out /tmp/crt.p12 -nodes -name 'Server-Cert' -password 'pass:'
    #  - command: pk12util -i /tmp/crt.p12 -d /etc/dirsrv/slapd-{{hostvars[inventory_hostname].host_name}}/ -W '' -K ''

    #  - name: Create keystore
    #    command: "{{item}}"
    #    with_items:
    #      - pk12util -i /tmp/crt.p12 -d /etc/dirsrv/slapd-{{hostvars[inventory_hostname].host_name}}/ -W '' -K ''
    #      - certutil -d /etc/dirsrv/slapd-{{hostvars[inventory_hostname].host_name}}/ -A -n "DigiCertCA"  -t CT,, -a -i /etc/pki/tls/certs/DigiCertCA.crt
    #      - certutil -d /etc/dirsrv/slapd-{{hostvars[inventory_hostname].host_name}}/ -A -n "TrustedRoot" -t CT,, -a -i /etc/pki/tls/certs/TrustedRoot.crt
    #      - pk12util -i /tmp/crt.p12 -d /etc/dirsrv/admin-serv/ -W '' -K ''
    #      - certutil -d /etc/dirsrv/admin-serv/ -A -n "DigiCertCA"  -t CT,, -a -i /etc/pki/tls/certs/DigiCertCA.crt
    #      - certutil -d /etc/dirsrv/admin-serv/ -A -n "TrustedRoot" -t CT,, -a -i /etc/pki/tls/certs/TrustedRoot.crt

    #  - name: Check if selfsigned certificate, and disable certficate checking from admin server if so
    #    shell: /bin/openssl verify -CAfile /etc/pki/tls/certs/{{ hostvars[inventory_hostname].service_name }}.crt /etc/pki/tls/certs/{{ hostvars[inventory_hostname].service_name }}.crt
    #    register: selfsigned

    #  - lineinfile: dest=/etc/dirsrv/admin-serv/nss.conf regexp=^NSSEnforceValidCerts line="NSSEnforceValidCerts off"
    #    when: ('"OK" in selfsigned')
